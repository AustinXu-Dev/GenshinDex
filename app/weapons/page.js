"use client";
import { useState, useEffect, useRef } from "react";
import { useForm } from "react-hook-form";
import Link from 'next/link';

export default function WeaponPage() {
  const API_BASE = "/api";
  const { register, handleSubmit, reset } = useForm();
  const dropdownRef = useRef(null);

  const [weapons, setWeapons] = useState([]);
  const [originalWeapons, setOriginalWeapons] = useState([]); // To keep original weapon list for reset
  const [editMode, setEditMode] = useState(false);
  const [selectedWeapon, setSelectedWeapon] = useState(null);
  const [showPopup, setShowPopup] = useState(false);
  const [popupType, setPopupType] = useState(''); // 'add' or 'edit' or 'view'

  const [uniqueTypes, setUniqueTypes] = useState([]);
  const [selectedSort, setSelectedSort] = useState(""); // Track selected sort option
  const [selectedFilters, setSelectedFilters] = useState({
    type: null,
  }); // Track selected filters

  const [dropdownVisible, setDropdownVisible] = useState({
    sort: false,
    filterType: false,
  });

  useEffect(() => {
    fetchWeapons();
  }, []);

  useEffect(() => {
    function handleClickOutside(event) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setDropdownVisible({
          sort: false,
          filterType: false,
        });
      }
    }

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  async function fetchWeapons() {
    try {
      const data = await fetch(`${API_BASE}/weapons`);
      const weapons = await data.json();
      setWeapons(weapons);
      setOriginalWeapons(weapons); // Save the original list for reset

      // Generate unique filter options
      setUniqueTypes([...new Set(weapons.map(w => w.type))]);
    } catch (error) {
      console.error("Error fetching weapons:", error);
    }
  }

  function convertBaseAttackToNumber(baseAttack) {
    return parseInt(baseAttack.split(' ')[0]); // Extract number before first space and convert to integer
  }

  // Handle sorting by name (string), rarity (integer), or baseattack (integer)
  function handleSortBy(attribute) {
    setSelectedSort(attribute);

    const sortedWeapons = [...weapons].sort((a, b) => {
      if (attribute === "name") {
        return a[attribute].localeCompare(b[attribute]);
      } else if (attribute === "rarity" || attribute === "baseattack") {
        const aValue = attribute === "baseattack" ? convertBaseAttackToNumber(a[attribute]) : a[attribute];
        const bValue = attribute === "baseattack" ? convertBaseAttackToNumber(b[attribute]) : b[attribute];
        return aValue - bValue;
      }
    });
    setWeapons(sortedWeapons);
  }

  // Undo sort
  function undoSort() {
    setSelectedSort("");
    applyFilters();
  }

  // Handle filtering by type
  function handleFilterBy(criteria, value) {
    const newFilters = { ...selectedFilters };

    if (selectedFilters[criteria] === value) {
      newFilters[criteria] = null;
    } else {
      newFilters[criteria] = value;
    }

    setSelectedFilters(newFilters);
    applyFilters(newFilters);
  }

  // Apply all selected filters to the weapon list
  function applyFilters(filters = selectedFilters) {
    let filteredWeapons = [...originalWeapons];

    // Apply type filter
    if (filters.type) {
      filteredWeapons = filteredWeapons.filter(weapon => weapon.type === filters.type);
    }

    setWeapons(filteredWeapons);
  }

  // Undo all filters (reset everything)
  function undoFilter() {
    setSelectedFilters({ type: null });
    setWeapons(originalWeapons);
  }

  // Start edit mode with selected weapon data
  function startEditMode(weapon) {
    reset(weapon);
    setSelectedWeapon(weapon);
    setPopupType('edit');
    setShowPopup(true);
  }

  // Stop edit mode and reset form
  function stopEditMode() {
    reset({
      name: "",
      type: "",
      rarity: "",
      baseattack: "",
      substat: "",
      "passiveAbility": "",
      image: "",
    });
    setEditMode(false);
    setSelectedWeapon(null);
    setShowPopup(false);
  }

  // Submit the form for adding or editing a weapon
  function handleWeaponFormSubmit(data) {
    const method = popupType === 'edit' ? "PUT" : "POST";
    const url = popupType === 'edit' ? `${API_BASE}/weapons/${selectedWeapon.id}` : `${API_BASE}/weapons`;

    fetch(url, {
      method,
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    }).then(() => {
      fetchWeapons();
      stopEditMode();
    });
  }

  // Delete a weapon
  async function deleteWeapon(weapon) {
    if (!confirm(`Are you sure to delete [${weapon.name}]`)) return;

    try {
      const id = weapon.id;
      const res = await fetch(`${API_BASE}/weapons/${id}`, {
        method: "DELETE",
      });

      if (res.ok) {
        fetchWeapons(); // Refresh the weapons list after deletion
      } else {
        const errorData = await res.json();
        console.error('Delete failed:', errorData.message || 'Unknown error');
      }
    } catch (error) {
      console.error('Error deleting weapon:', error);
    }
  }

  // View weapon info
  function viewWeaponInfo(weapon) {
    setSelectedWeapon(weapon);
    setPopupType('view');
    setShowPopup(true);
  }

  // Close pop-up
  function closePopup() {
    setShowPopup(false);
    setSelectedWeapon(null);
  }

  // Toggle dropdown visibility
  const toggleDropdown = (type) => {
    setDropdownVisible({
      ...dropdownVisible,
      [type]: !dropdownVisible[type],
    });
  };

  return (
    <div className="container mx-auto py-8" ref={dropdownRef}>
      {/* Back Button and Title */}
      <div className="flex justify-between items-center mb-8">
        <Link href="/">
        <button type="button" class="text-white text-xl hover:bg-indigo-950 focus:ring-4 focus:outline-none focus:ring-blue-300 font-bold rounded-lg text-sm px-5 py-3 text-center inline-flex items-center gap-2 me-2">
        <svg class="w-5 h-5 flip-horizontal" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
        </svg>
        Back
        <span class="sr-only">Icon description</span>
        </button>
        </Link>
        <div className="flex items-center gap-3">
        <svg xmlns="http://www.w3.org/2000/svg" width="70" height="70" viewBox="0 0 70 70" fill="none">
        <path d="M17.6026 11.2109C23.5865 11.2863 29.562 16.1896 33.7631 20.0037C34.4531 20.7813 34.4531 20.7813 34.4531 21.875C34.6992 21.6494 34.9452 21.4238 35.1987 21.1914C46.0539 11.4457 46.0539 11.4457 52.8076 11.3135C54.6875 11.4844 54.6875 11.4844 55.2344 12.0313C56.0236 17.0628 53.1006 21.5456 50.3766 25.592C48.8686 27.5897 47.4457 29.1789 45.3906 30.625C45.9051 31.9539 46.2076 32.6598 47.4756 33.3594C48.8051 33.4858 48.8051 33.4858 50.0049 32.2656C51.4063 31.1719 51.4063 31.1719 52.7734 31.1035C54.6961 31.9687 55.9156 33.1486 56.875 35C57.165 36.5949 57.0671 37.7289 56.875 39.375C55.5846 40.6654 54.8084 40.7375 53.0469 41.0156C53.5552 43.8624 55.3152 45.6896 57.4219 47.5781C58.6935 48.2689 59.9315 48.7997 61.2949 49.2807C62.3438 49.7656 62.3438 49.7656 63.4375 51.4063C63.8052 55.2053 63.8052 55.2053 62.4121 57.3877C60.9094 58.8462 60.4588 59.0397 58.3447 59.1992C56.1253 59.0488 55.2658 58.868 53.5938 57.4219C53.2528 56.749 52.936 56.0636 52.6367 55.3711C51.5057 52.8168 49.7414 51.5746 47.4841 50.0092C47.1542 49.7483 46.8243 49.4875 46.4844 49.2188C46.4844 48.8578 46.4844 48.4969 46.4844 48.125C45.6723 48.3957 45.6723 48.3957 44.8438 48.6719C44.4377 49.9353 44.0719 51.2125 43.75 52.5C43.5695 52.6805 43.3891 52.8609 43.2031 53.0469C40.2932 53.0233 38.3908 52.6642 36.0938 50.8594C34.3921 50.9466 33.4623 51.3403 32.0264 52.2607C30.3265 53.2143 29.2651 53.2604 27.3438 53.0469C26.25 51.9531 26.25 51.9531 26.1817 50.2441C26.2042 49.7253 26.2268 49.2064 26.25 48.6719C25.5281 48.4914 24.8063 48.3109 24.0625 48.125C23.9265 48.4542 23.7904 48.7834 23.6502 49.1226C22.8643 50.4949 22.1338 50.9987 20.8154 51.8506C18.5075 53.489 17.9363 54.8166 16.9531 57.4219C15.9153 58.6592 15.2016 58.9823 13.627 59.2719C11.1643 59.4597 10.1507 59.3068 8.16896 57.7295C6.91264 55.893 6.74316 54.1696 6.88295 51.9809C7.10939 50.8594 7.10939 50.8594 7.96388 49.5264C9.29689 48.6719 9.29689 48.6719 11.0742 48.3301C14.157 47.1997 15.7398 44.816 17.5 42.1094C17.5 41.7484 17.5 41.3875 17.5 41.0156C16.9812 40.869 16.4623 40.7224 15.9277 40.5713C14.2188 39.9219 14.2188 39.9219 13.125 38.2813C13.2817 35.8783 13.906 34.2131 15.3125 32.2656C16.9531 31.1719 16.9531 31.1719 18.5254 31.2402C20.4481 31.7786 21.5051 32.5717 22.9688 33.9063C23.8711 32.8234 24.7734 31.7406 25.7031 30.625C25.3422 30.625 24.9813 30.625 24.6094 30.625C24.6094 30.2641 24.6094 29.9031 24.6094 29.5313C24.2985 29.4107 23.9876 29.2902 23.6673 29.166C19.3304 26.6293 16.8336 20.8306 15.1373 16.3571C14.7423 14.6656 14.8002 13.6772 15.3125 12.0313C15.8594 11.4844 15.8594 11.4844 17.6026 11.2109Z" fill="#E7E7E7"/>
        <path d="M20.7313 9.04054C21.8295 9.45092 22.8928 9.90542 23.96 10.3906C24.5318 10.6428 24.5318 10.6428 25.1151 10.9001C28.0557 12.2581 30.4328 13.9622 32.804 16.1841C33.8455 17.0949 33.8455 17.0949 35.0769 16.7993C35.4125 16.6696 35.748 16.5399 36.0938 16.4063C36.4547 16.4063 36.8156 16.4063 37.1875 16.4063C37.8983 15.8565 38.5902 15.2821 39.2725 14.6973C43.3129 11.4962 48.7804 8.25764 54.1406 8.75001C55.7986 9.42024 56.5718 9.8864 57.4902 11.4139C58.346 13.4959 57.9857 15.3961 57.4219 17.5C55.7694 21.3631 53.7859 24.9757 51.4062 28.4375C51.9815 28.5616 52.5567 28.6857 53.1494 28.8135C55.3648 29.4624 56.5271 30.4235 57.9688 32.2656C59.4886 35.0698 59.9272 37.3187 59.0625 40.4688C58.2764 41.5283 58.2764 41.5283 57.4219 42.1094C57.0609 42.1094 56.7 42.1094 56.3281 42.1094C57.08 42.9525 57.08 42.9525 57.9688 43.75C58.3297 43.75 58.6906 43.75 59.0625 43.75C59.0625 44.2914 59.0625 44.8328 59.0625 45.3906C59.372 45.5168 59.6815 45.643 60.0003 45.773C63.2909 47.2362 63.2909 47.2362 64.0527 49.0137C63.9844 50.3125 63.9844 50.3125 62.8906 51.4063C62.6086 51.0792 62.3267 50.7521 62.0361 50.4151C60.7422 49.1086 60.7422 49.1086 58.8916 48.5352C56.2918 47.5188 54.5905 45.4749 53.0469 43.2031C52.6666 41.9705 52.6666 41.9705 52.5 41.0156C53.7633 40.4742 55.0266 39.9328 56.3281 39.375C56.5721 36.2327 56.5721 36.2327 55.4053 33.3936C53.9727 32.1159 53.3281 31.6719 51.4062 31.7188C49.869 32.7202 49.869 32.7202 48.6719 33.9063C46.1142 33.0986 46.1142 33.0986 45.2197 31.6504C45.0957 31.312 44.9716 30.9736 44.8438 30.625C45.5205 30.1513 45.5205 30.1513 46.2109 29.668C50.1011 26.4231 54.2957 20.3044 54.8157 15.1309C54.8229 14.0969 54.7625 13.0626 54.6875 12.0313C49.3509 11.5181 44.9181 13.6941 40.7764 16.9531C39.3351 18.1746 37.9588 19.4285 36.6406 20.7813C36.2797 21.1422 35.9188 21.5031 35.5469 21.875C35.1859 21.875 34.825 21.875 34.4531 21.875C34.0583 21.3449 33.6636 20.8148 33.2568 20.2686C31.4905 18.1155 29.4036 16.8174 27.0361 15.4151C26.6811 15.2047 26.326 14.9943 25.9601 14.7775C22.162 12.5625 22.162 12.5625 17.876 11.9629C17.2105 11.9855 16.545 12.008 15.8594 12.0313C14.8027 15.6627 16.4387 18.6225 18.0469 21.875C19.8235 24.7463 21.7825 27.6467 24.6094 29.5313C24.6094 29.8922 24.6094 30.2531 24.6094 30.625C24.9703 30.625 25.3312 30.625 25.7031 30.625C24.9412 32.4665 24.074 33.3517 22.4219 34.4531C21.7282 33.7595 21.7282 33.7595 21.0205 33.0518C19.4553 31.7219 19.2415 31.7139 17.0215 31.8213C16.4575 31.9679 15.8936 32.1146 15.3125 32.2656C14.4325 34.2603 13.8614 36.1022 13.6719 38.2813C14.9868 40.2536 15.8303 40.3892 18.0469 41.0156C16.4816 44.3513 14.4343 47.8794 10.835 49.1846C10.1469 49.3763 9.45889 49.5681 8.75 49.7656C8.01711 50.1227 7.28579 50.4833 6.5625 50.8594C6.38203 50.8594 6.20156 50.8594 6.01562 50.8594C6.01562 49.957 6.01562 49.0547 6.01562 48.125C9.70703 46.0059 9.70703 46.0059 10.9375 45.3906C11.118 44.8492 11.2984 44.3078 11.4844 43.75C12.2965 43.4793 12.2965 43.4793 13.125 43.2031C13.125 42.8422 13.125 42.4813 13.125 42.1094C12.8656 41.9064 12.6062 41.7033 12.3389 41.4942C10.9986 39.8859 10.8779 38.1176 10.9375 36.0938C11.8057 33.2481 12.9812 31.3857 15.3125 29.5313C16.5924 29.0204 17.7849 28.7299 19.1406 28.4375C18.896 28.0794 18.6514 27.7213 18.3994 27.3523C11.6386 17.1463 11.6386 17.1463 12.5781 12.0313C14.6981 8.78065 16.871 7.9661 20.7313 9.04054Z" fill="#1E1B4B"/>
        <path d="M53.0469 13.6719C51.5667 20.9598 48.0358 25.5352 42.5687 30.3622C39.514 33.0808 36.6803 36.0298 33.8127 38.9425C33.4065 39.3531 33.0003 39.7637 32.5818 40.1868C32.2175 40.5574 31.8532 40.928 31.4779 41.3099C30.625 42.1094 30.625 42.1094 30.0781 42.1094C30.0781 40.3047 30.0781 38.5 30.0781 36.6406C28.093 36.6406 26.1078 36.6406 24.0625 36.6406C27.0814 33.0649 30.2784 29.7195 33.5694 26.3954C34.225 25.7307 34.8776 25.0632 35.5272 24.3927C39.3846 20.4126 42.9483 16.9907 48.125 14.7656C48.5869 14.5594 49.0488 14.3531 49.5246 14.1406C50.8594 13.6719 50.8594 13.6719 53.0469 13.6719Z" fill="#323232"/>
        <path d="M24.0625 48.125C24.7844 48.3055 25.5062 48.4859 26.25 48.6719C26.6109 49.9352 26.9719 51.1984 27.3438 52.5C29.5116 52.7115 30.7933 52.5123 32.6074 51.3721C34.4531 50.3125 34.4531 50.3125 35.5811 50.3467C36.4709 50.7773 37.3443 51.2418 38.2129 51.7139C40.0436 52.556 41.2154 52.642 43.2031 52.5C43.7445 51.0562 44.2859 49.6125 44.8438 48.125C46.4844 48.125 46.4844 48.125 47.749 49.3213C48.234 49.8289 48.719 50.3364 49.2188 50.8594C49.7827 51.288 50.3467 51.7166 50.9277 52.1582C52.3685 53.4737 52.741 53.9103 53.3887 55.6104C53.9672 57.405 53.9672 57.405 55.0977 58.208C56.8839 58.6546 58.3206 58.7089 60.1562 58.5156C61.7466 57.5 61.7466 57.5 62.8906 56.3281C63.432 56.5988 63.432 56.5988 63.9844 56.875C63.7096 58.9086 63.4222 59.9678 61.7969 61.25C59.2835 61.9335 56.9945 62.0106 54.5166 61.2158C52.267 59.594 50.7867 57.6828 49.3896 55.3027C49.1528 54.9192 48.9159 54.5357 48.6719 54.1406C48.3109 54.1406 47.95 54.1406 47.5781 54.1406C46.8562 54.1406 46.1344 54.1406 45.3906 54.1406C44.8492 54.5016 44.3078 54.8625 43.75 55.2344C40.7864 55.5618 37.8196 55.2807 35 54.3115C33.8571 54.0354 33.8571 54.0354 32.6758 54.6533C30.2681 55.5836 27.8667 55.6623 25.4297 54.6875C25.159 54.507 24.8883 54.3266 24.6094 54.1406C24.6094 54.3211 24.6094 54.5016 24.6094 54.6875C21.4648 55.3027 21.4648 55.3027 20.2344 54.6875C20.1893 55.0823 20.1441 55.4771 20.0977 55.8838C19.4223 58.4164 18.1416 59.7428 15.9619 61.1475C13.2276 62.1661 11.2774 62.165 8.5791 61.0449C7.10938 60.1562 7.10938 60.1562 6.01562 59.0625C5.94727 57.3535 5.94727 57.3535 6.01562 55.7812C6.55703 55.7812 7.09844 55.7812 7.65625 55.7812C7.94951 56.2324 8.24277 56.6836 8.54492 57.1484C9.98813 58.6676 10.2764 58.7582 12.2705 58.8574C14.2239 58.745 14.7324 58.5404 16.3721 57.3193C17.5357 55.8916 17.5357 55.8916 17.9614 54.444C18.7302 52.7455 19.5824 52.1063 21.0889 51.0303C22.867 49.8276 22.867 49.8276 24.0625 48.125Z" fill="#1E1B4B"/>
        <path d="M17.5 33.3594C19.0615 33.9955 19.7211 34.4962 20.7812 35.8545C23.2632 37.871 25.8719 37.6798 28.9844 37.7344C28.9794 38.1637 28.9745 38.593 28.9694 39.0353C29.0588 42.2027 29.139 44.3325 31.4795 46.6211C32.0924 47.1391 32.7148 47.647 33.3594 48.125C32.9984 48.6664 32.6375 49.2078 32.2656 49.7656C30.2832 50.1416 30.2832 50.1416 28.4375 50.3125C28.4037 49.8952 28.3698 49.4778 28.335 49.0479C28.0072 47.4793 28.0072 47.4793 26.626 46.5186C25.2437 45.7855 25.2437 45.7855 24.18 46.2857C22.5605 47.2825 21.0885 48.4277 19.6191 49.6289C19.3252 49.8573 19.0312 50.0857 18.7283 50.321C16.703 51.9777 16.0369 53.3115 15.3125 55.7812C13.5447 56.9598 12.9875 57.1312 10.9375 56.875C9.94629 56.2598 9.94629 56.2598 9.29688 55.2344C9.05762 53.5938 9.05762 53.5938 9.29688 51.9531C10.4737 50.6858 11.3355 50.3456 13.0225 49.9707C15.3301 48.9753 16.2707 47.5058 17.7115 45.4953C18.5938 44.2969 18.5938 44.2969 19.5358 43.4061C19.7663 43.1586 19.9969 42.9112 20.2344 42.6562C20.0772 41.0847 19.6405 39.7808 19.1406 38.2812C18.0578 38.2812 16.975 38.2812 15.8594 38.2812C15.716 36.5606 15.724 35.7556 16.6797 34.2822C16.9504 33.9777 17.2211 33.6731 17.5 33.3594Z" fill="#313131"/>
        <path d="M43.2715 32.8125C44.4231 33.4267 45.1829 34.0821 46.0742 35.0342C46.359 35.3338 46.6438 35.6334 46.9373 35.9421C47.2545 36.2879 47.2545 36.2879 47.5781 36.6406C49.4572 35.8055 50.9245 34.6723 52.5 33.3594C54.6538 35.1767 54.6538 35.1767 54.8242 37.0508C54.7791 37.4568 54.734 37.8629 54.6875 38.2812C54.2025 38.2812 53.7175 38.2812 53.2178 38.2812C51.4219 38.6228 51.4219 38.6228 50.791 39.6848C50.5034 40.2251 50.5034 40.2251 50.21 40.7764C48.7165 43.5267 46.5294 44.8568 43.9294 46.5079C42.5369 47.4806 42.5369 47.4806 42.2034 49.0756C42.1724 49.4838 42.1413 49.892 42.1094 50.3125C39.0332 50.4492 39.0332 50.4492 37.1875 49.2188C37.1875 47.5781 37.1875 47.5781 37.9053 46.8198C39.187 45.8318 39.187 45.8318 40.4688 44.8438C40.1341 42.9628 39.4184 41.8274 38.2471 40.332C37.9475 39.9457 37.6479 39.5594 37.3392 39.1614C37.1087 38.8709 36.8781 38.5805 36.6406 38.2812C37.4979 37.3504 38.3658 36.4293 39.2383 35.5127C39.7205 34.9988 40.2027 34.4849 40.6995 33.9554C42.1094 32.8125 42.1094 32.8125 43.2715 32.8125Z" fill="#333333"/>
        <path d="M17.5 13.6719C24.1821 14.7916 29.3507 18.7323 33.9062 23.5156C33.0984 25.4034 32.0261 26.6053 30.5566 28.0273C30.1605 28.4137 29.7643 28.8 29.3561 29.198C29.0529 29.4884 28.7498 29.7789 28.4375 30.0781C24.0348 28.2412 21.0249 23.5531 19.1022 19.3628C18.377 17.4858 17.9015 15.6431 17.5 13.6719Z" fill="#313131"/>
        <path d="M49.7656 43.75C51.7425 44.5692 52.8753 45.7053 54.2773 47.3047C54.6637 47.7389 55.05 48.1732 55.448 48.6206C56.3281 49.7656 56.3281 49.7656 56.3281 50.8594C56.9372 50.8368 57.5463 50.8143 58.1738 50.791C60.1562 50.8594 60.1562 50.8594 61.25 51.9531C61.4306 53.6503 61.5263 54.7738 60.6348 56.2598C59.1276 57.164 58.0504 57.0903 56.3281 56.875C54.9129 55.9652 54.7066 55.3063 54.2731 53.6707C53.4568 51.607 52.5873 50.9613 50.791 49.6973C49.2828 48.6334 49.2828 48.6334 48.125 47.5781C48.125 45.3906 48.125 45.3906 48.9453 44.4336C49.216 44.208 49.4867 43.9824 49.7656 43.75Z" fill="#303030"/>
        <path d="M35 40.4688C37.5635 42.4448 37.5635 42.4448 38.2812 43.2031C38.2812 43.7445 38.2812 44.2859 38.2812 44.8438C36.6406 46.04 36.6406 46.04 35 47.0312C34.0977 46.1289 33.1953 45.2266 32.2656 44.2969C32.9727 42.7195 33.72 41.6324 35 40.4688Z" fill="#1E1B4B"/>
        <path d="M36.0938 50.3125C35.9922 50.8313 35.8907 51.3502 35.7861 51.8848C35.39 53.5383 35.39 53.5383 36.0938 54.6875C35.7892 54.5747 35.4847 54.4619 35.1709 54.3457C33.8668 54.0211 33.8668 54.0211 32.5732 54.6875C30.9327 55.3277 30.103 55.1634 28.4375 54.6875C30.6275 52.3042 32.7177 50.3125 36.0938 50.3125Z" fill="#1E1B4B"/>
        <path d="M33.9062 23.5156C34.2672 24.2375 34.6281 24.9594 35 25.7031C34.2339 26.5428 33.4572 27.3728 32.6758 28.1982C32.0286 28.893 32.0286 28.893 31.3684 29.6017C30.0781 30.625 30.0781 30.625 28.822 30.5032C28.361 30.2928 28.361 30.2928 27.8906 30.0781C28.2791 29.696 28.6675 29.314 29.0677 28.9203C29.5703 28.4226 30.073 27.9249 30.5908 27.4121C31.3427 26.6698 31.3427 26.6698 32.1097 25.9125C33.3659 24.7314 33.3659 24.7314 33.9062 23.5156Z" fill="#E1E1E1"/>
        <path d="M54.6875 10.3906C55.7812 11.4844 55.7812 11.4844 55.8496 13.1934C55.8271 13.7122 55.8045 14.2311 55.7812 14.7656C55.6008 14.7656 55.4203 14.7656 55.2344 14.7656C55.0539 13.8633 54.8734 12.9609 54.6875 12.0313C51.8329 11.9328 49.7259 12.0471 47.0312 13.125C47.5781 11.4844 47.5781 11.4844 48.7061 10.835C50.821 10.25 52.4922 10.2467 54.6875 10.3906Z" fill="#242424"/>
        <path d="M35 40.4688C37.5635 42.4448 37.5635 42.4448 38.2812 43.2031C38.2812 43.7445 38.2812 44.2859 38.2812 44.8438C36.8375 44.6633 35.3938 44.4828 33.9062 44.2969C33.9062 42.1094 33.9062 42.1094 35 40.4688Z" fill="#1E1B4B"/>
        <path d="M44.8438 48.125C46.4844 48.125 46.4844 48.125 47.749 49.3213C48.234 49.8289 48.719 50.3364 49.2188 50.8594C50.2931 51.7969 51.3938 52.6934 52.5 53.5938C52.3195 54.1352 52.1391 54.6766 51.9531 55.2344C46.7999 51.259 46.7999 51.259 45.9375 48.6719C45.5766 48.4914 45.2156 48.3109 44.8438 48.125Z" fill="#1E1B4B"/>
        <path d="M18.0469 56.3281C18.4078 57.05 18.7687 57.7719 19.1406 58.5156C16.543 60.7031 16.543 60.7031 15.3125 60.7031C15.493 59.8008 15.6734 58.8984 15.8594 57.9688C16.4008 57.7883 16.9422 57.6078 17.5 57.4219C17.6805 57.0609 17.8609 56.7 18.0469 56.3281Z" fill="#1E1B4B"/>
        <path d="M44.8438 45.9375C44.4941 46.1518 44.1444 46.3661 43.7842 46.5869C42.4168 47.7885 42.3011 48.5395 42.1094 50.3125C41.207 50.1321 40.3047 49.9516 39.375 49.7656C39.7359 49.5852 40.0969 49.4047 40.4688 49.2188C40.6267 48.7789 40.7846 48.339 40.9473 47.8858C41.5625 46.4844 41.5625 46.4844 42.6562 45.7324C43.75 45.3906 43.75 45.3906 44.8438 45.9375Z" fill="#282828"/>
        <path d="M35.5469 24.6094C36.0883 24.7898 36.6297 24.9703 37.1875 25.1562C36.6004 25.7879 36.0066 26.4133 35.4102 27.0361C34.9153 27.5596 34.9153 27.5596 34.4104 28.0936C33.3044 29.0309 32.5868 29.309 31.1719 29.5312C31.6954 28.9155 32.2196 28.3004 32.7441 27.6855C33.036 27.3429 33.3278 27.0003 33.6285 26.6473C34.2422 25.9446 34.8872 25.2691 35.5469 24.6094Z" fill="#3A3A3A"/>
        <path d="M50.3125 43.75C54.7981 47.4368 54.7981 47.4368 55.7812 49.2188C55.6008 49.7602 55.4203 50.3016 55.2344 50.8594C54.5137 49.9844 53.7966 49.1066 53.0811 48.2275C52.6813 47.739 52.2816 47.2505 51.8698 46.7471C50.8594 45.3906 50.8594 45.3906 50.3125 43.75Z" fill="black" fill-opacity="0.25"/>
        <path d="M60.7031 59.6094C60.3422 60.3313 59.9813 61.0531 59.6094 61.7969C58.5266 61.7969 57.4437 61.7969 56.3281 61.7969C56.7383 60.7373 56.7383 60.7373 57.4219 59.6094C58.8422 59.0324 59.3148 58.9152 60.7031 59.6094Z" fill="#1E1B4B"/>
        <path d="M20.7812 41.5625C20.9617 42.2844 21.1422 43.0062 21.3281 43.75C20.6445 44.6045 20.6445 44.6045 19.6875 45.3906C19.383 45.6952 19.0784 45.9997 18.7646 46.3135C18.5278 46.5503 18.2909 46.7872 18.0469 47.0312C17.6859 46.6703 17.325 46.3094 16.9531 45.9375C18.2164 44.4937 19.4797 43.05 20.7812 41.5625Z" fill="#393939"/>
        <path d="M17.5 33.3594C18.0414 33.5398 18.5828 33.7203 19.1406 33.9062C18.9602 34.2672 18.7797 34.6281 18.5938 35C18.2328 35 17.8719 35 17.5 35C17.5 35.3609 17.5 35.7219 17.5 36.0938C17.1391 36.0938 16.7781 36.0938 16.4063 36.0938C16.4063 36.6352 16.4063 37.1766 16.4063 37.7344C17.4891 38.0051 17.4891 38.0051 18.5938 38.2812C17.6914 38.2812 16.7891 38.2812 15.8594 38.2812C15.716 36.5606 15.724 35.7556 16.6797 34.2822C16.9504 33.9777 17.2211 33.6731 17.5 33.3594Z" fill="#424242"/>
        <path d="M46.4844 28.9844C46.8453 29.1648 47.2062 29.3453 47.5781 29.5312C47.0367 30.3434 47.0367 30.3434 46.4844 31.1719C47.2063 32.0742 47.9281 32.9766 48.6719 33.9062C46.1142 33.0986 46.1142 33.0986 45.2197 31.6504C45.0957 31.312 44.9716 30.9736 44.8438 30.625C45.3852 30.0836 45.9266 29.5422 46.4844 28.9844Z" fill="#272727"/>
        <path d="M42.1094 32.8125C43.7029 32.9719 44.2015 33.247 45.2539 34.4873C45.4795 34.837 45.7051 35.1866 45.9375 35.5469C43.8001 35.5469 43.1397 34.7235 41.5625 33.3594C41.743 33.1789 41.9234 32.9984 42.1094 32.8125Z" fill="#414141"/>
        <path d="M53.0469 40.4688C54.1297 40.7395 54.1297 40.7395 55.2344 41.0156C54.693 41.0156 54.1516 41.0156 53.5938 41.0156C53.9547 41.557 54.3156 42.0984 54.6875 42.6562C54.507 43.1977 54.3266 43.7391 54.1406 44.2969C53.2861 43.6133 53.2861 43.6133 52.5 42.6562C52.6709 41.46 52.6709 41.46 53.0469 40.4688Z" fill="#252525"/>
        </svg>
        <h1 className="text-3xl font-bold">Weapons</h1>
        </div>
      </div>

     

      {/* Dropdowns for Sorting and Filtering */}
      <div className="flex justify-end gap-4 mb-4 mt-4">

       {/* Add New Button */}
       <button onClick={() => { setPopupType('add'); setShowPopup(true); }} className="bg-emerald-600 text-white px-4 py-2 rounded-md hover:bg-green-700 inline-flex items-center gap-2">
      <svg
      class="w-5 h-5"
      aria-hidden="true"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      >
      <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M12 4v16m8-8H4"
      />
      </svg>
        Add New Weapon
      </button>

        {/* Sort By Dropdown */}
        <div className="relative inline-block text-left">
          <button onClick={() => toggleDropdown("sort")} className={`px-2 py-2 rounded-md ${selectedSort ? 'bg-blue-800 text-white' : 'bg-blue-800 text-white'} hover:bg-blue-700 inline-flex items-center gap-2`}>
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M8 2L7.293 1.293L8 0.585999L8.707 1.293L8 2ZM9 17C9 17.2652 8.89464 17.5196 8.70711 17.7071C8.51957 17.8946 8.26522 18 8 18C7.73478 18 7.48043 17.8946 7.29289 17.7071C7.10536 17.5196 7 17.2652 7 17H9ZM2.293 6.293L7.293 1.293L8.707 2.707L3.707 7.707L2.293 6.293ZM8.707 1.293L13.707 6.293L12.293 7.707L7.293 2.707L8.707 1.293ZM9 2V17H7V2H9ZM16 22L15.293 22.707L16 23.414L16.707 22.707L16 22ZM17 7C17 6.73478 16.8946 6.48043 16.7071 6.29289C16.5196 6.10536 16.2652 6 16 6C15.7348 6 15.4804 6.10536 15.2929 6.29289C15.1054 6.48043 15 6.73478 15 7H17ZM10.293 17.707L15.293 22.707L16.707 21.293L11.707 16.293L10.293 17.707ZM16.707 22.707L21.707 17.707L20.293 16.293L15.293 21.293L16.707 22.707ZM17 22V7H15V22H17Z" fill="white"/>
          </svg>
            Sort By
          </button>
          {dropdownVisible.sort && (
            <div className="absolute right-0 mt-2 w-36 bg-white border rounded-md shadow-lg">
              <button className={`block px-4 py-2 ${selectedSort === "name" ? 'bg-gray-300' : 'text-gray-800 hover:bg-gray-200'}`} onClick={() => handleSortBy("name")}>
                Name
              </button>
              <button className={`block px-4 py-2 ${selectedSort === "rarity" ? 'bg-gray-300' : 'text-gray-800 hover:bg-gray-200'}`} onClick={() => handleSortBy("rarity")}>
                Rarity
              </button>
              <button className={`block px-4 py-2 ${selectedSort === "baseattack" ? 'bg-gray-300' : 'text-gray-800 hover:bg-gray-200'}`} onClick={() => handleSortBy("baseattack")}>
                Base Attack
              </button>
              <button className="block px-4 py-2 text-gray-800 hover:bg-gray-200" onClick={undoSort}>
                Undo Sort
              </button>
            </div>
          )}
        </div>

        {/* Filter By Type Dropdown */}
        <div className="relative inline-block text-left">
          <button onClick={() => toggleDropdown("filterType")} className={`px-2 py-2 rounded-md ${selectedFilters.type ? 'bg-blue-800 text-white' : 'bg-blue-800 text-white'} hover:bg-blue-700 inline-flex items-center gap-2`}>
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 46 47" fill="none">
          <path d="M36 1C42.1523 0.902344 42.1523 0.902344 44 1C45 2 45 2 45.0977 3.84766C45.0651 5.89844 45.0326 7.94922 45 10C44.3555 10.2127 43.7109 10.4254 43.0469 10.6445C40.7267 11.8453 40.7267 11.8453 40.3906 14.5742C40.3442 15.6016 40.2978 16.629 40.25 17.6875C40.1611 19.3059 40.1611 19.3059 40.0703 20.957C40.017 23.2625 40.0506 25.5701 40.125 27.875C39.9353 32.6178 38.5016 35.4824 35.1602 38.8594C27.4656 45.7945 27.4656 45.7945 22 46.25C19 46 19 46 17 44.9375C14.0762 43.567 12.1388 44.3486 9 45C7.37673 45.2019 5.75154 45.3889 4.125 45.5625C3.34383 45.6463 2.56266 45.7301 1.75781 45.8164C1.17773 45.877 0.597656 45.9376 0 46C0.115097 44.5825 0.242537 43.166 0.375 41.75C0.444609 40.9611 0.514219 40.1722 0.585938 39.3594C1 37 1 37 2.0022 35.2439C3.29919 32.3272 3.30656 29.9255 3.37891 26.7383C3.41307 25.5375 3.44723 24.3368 3.48242 23.0996C3.50885 21.8499 3.53527 20.6001 3.5625 19.3125C3.62214 16.8293 3.68572 14.3462 3.75391 11.8633C3.77783 10.7628 3.80176 9.66237 3.82642 8.52856C4 6 4 6 5 5C7.05729 4.68077 9.11614 4.48839 11.1875 4.28125C13.0168 4.18002 13.0168 4.18002 14 3C16.6167 2.87286 19.1953 2.81479 21.8125 2.8125C22.5376 2.80025 23.2627 2.78801 24.0098 2.77539C27.8299 2.76491 30.7644 2.8514 34 5C34.66 3.68 35.32 2.36 36 1Z" fill="#1E1B4B"/>
          <path d="M38 3C40.475 3.495 40.475 3.495 43 4C42.67 5.65 42.34 7.3 42 9C40.68 9 39.36 9 38 9C37.7319 9.5775 37.4638 10.155 37.1875 10.75C36 13 36 13 34.375 15C32.6223 17.1449 32.6223 17.1449 33 21C33.99 21 34.98 21 36 21C35.67 22.32 35.34 23.64 35 25C33.02 24.34 31.04 23.68 29 23C28.5269 23.494 28.0538 23.9881 27.5664 24.4971C25.3885 26.7588 23.1945 29.0044 21 31.25C19.8843 32.416 19.8843 32.416 18.7461 33.6055C14.1358 38.2959 10.1096 41.5079 4 44C3.34 44 2.68 44 2 44C4.46016 35.3894 9.49191 30.2293 15.75 24.125C16.4474 23.4366 17.1448 22.7483 17.8633 22.0391C19.571 20.3547 21.2833 18.6752 23 17C22.34 15.02 21.68 13.04 21 11C22.32 10.67 23.64 10.34 25 10C25.99 11.485 25.99 11.485 27 13C30.4334 11.7937 32.5036 10.6152 35 8C35.66 8 36.32 8 37 8C37.33 6.35 37.66 4.7 38 3Z" fill="#F8F8F8"/>
          <path d="M33 7C31.7194 8.7075 30.3823 10.3737 29 12C28.34 12 27.68 12 27 12C26.67 11.01 26.34 10.02 26 9C24.35 9 22.7 9 21 9C20.2993 12.1534 20 14.7272 20 18C18.6445 19.7461 18.6445 19.7461 16.8125 21.4375C15.8612 22.3347 15.8612 22.3347 14.8906 23.25C14.2667 23.8275 13.6428 24.405 13 25C12.016 25.9743 11.0361 26.9528 10.0625 27.9375C9.04156 28.9584 9.04156 28.9584 8 30C6 28 6 28 5.77295 25.937C5.78342 25.1096 5.7939 24.2822 5.80469 23.4297C5.81113 22.5338 5.81758 21.6379 5.82422 20.7148C5.84098 19.7777 5.85773 18.8405 5.875 17.875C5.88402 16.9301 5.89305 15.9852 5.90234 15.0117C5.92595 12.6742 5.95888 10.3372 6 8C13.7652 4.1174 24.7249 6.21476 33 7Z" fill="#E7E7E7"/>
          <path d="M32.625 26.3125C33.7387 26.5394 34.8525 26.7662 36 27C36.66 26.67 37.32 26.34 38 26C37.3698 31.3569 35.1444 35.1066 31.0977 38.6797C24.8929 43.5094 24.8929 43.5094 21 44C18.25 42.5625 18.25 42.5625 16 41C16.549 37.2637 17.9284 35.8544 20.8125 33.5C23.1664 31.5635 25.1151 29.8605 27.0625 27.5C29 26 29 26 32.625 26.3125Z" fill="#E3E3E3"/>
          <path d="M38 3C40.475 3.495 40.475 3.495 43 4C42.67 5.65 42.34 7.3 42 9C40.68 9 39.36 9 38 9C37.7319 9.5775 37.4638 10.155 37.1875 10.75C36 13 36 13 34.375 15C32.6223 17.1449 32.6223 17.1449 33 21C33.99 21 34.98 21 36 21C35.67 22.32 35.34 23.64 35 25C32.9954 24.3473 30.9962 23.678 29 23C28.0925 22.7731 27.185 22.5463 26.25 22.3125C24 21 24 21 22.6875 17.625C22 14 22 14 22 10C22.99 10 23.98 10 25 10C25.99 11.485 25.99 11.485 27 13C30.4334 11.7937 32.5036 10.6152 35 8C35.66 8 36.32 8 37 8C37.33 6.35 37.66 4.7 38 3Z" fill="#EFEFEF"/>
          <path d="M19 10C19.66 12.31 20.32 14.62 21 17C19.5239 18.503 18.044 20.0023 16.5625 21.5C15.7388 22.3353 14.9151 23.1706 14.0664 24.0312C12 26 12 26 11 26C11 21.38 11 16.76 11 12C17 10 17 10 19 10Z" fill="#F9F9F9"/>
          <path d="M23.625 7.875C24.4087 7.91625 25.1925 7.9575 26 8C26.33 9.32 26.66 10.64 27 12C28.98 10.68 30.96 9.36 33 8C33 8.99 33 9.98 33 11C31 12.6875 31 12.6875 29 14C27.68 13.34 26.36 12.68 25 12C25 11.34 25 10.68 25 10C24.01 10.33 23.02 10.66 22 11C22.66 12.98 23.32 14.96 24 17C19.38 21.62 14.76 26.24 10 31C9.34 30.34 8.68 29.68 8 29C8.61875 28.7525 9.2375 28.505 9.875 28.25C12.0973 27.2022 12.0973 27.2022 12.875 25.25C14.0719 22.8561 15.1864 21.9126 17.1875 20.1875C18.8375 18.7207 18.8375 18.7207 20 17C19.8539 13.3057 19.8539 13.3057 19 10C21 8 21 8 23.625 7.875Z" fill="#1E1B4B"/>
          <path d="M32 26C32.3873 29.3889 32.1747 30.738 30.25 33.625C26.396 37.6931 26.396 37.6931 24 39C21.25 38.6875 21.25 38.6875 19 38C20.4658 34.628 22.3518 32.3501 24.9375 29.75C25.6271 29.0436 26.3168 28.3372 27.0273 27.6094C29 26 29 26 32 26Z" fill="#FCFCFC"/>
          <path d="M38 3C39.65 3.33 41.3 3.66 43 4C42.67 5.65 42.34 7.3 42 9C40.68 9 39.36 9 38 9C37.7731 9.55687 37.5463 10.1137 37.3125 10.6875C35.641 13.6325 33.4472 15.6816 31 18C30.01 16.68 29.02 15.36 28 14C29.1197 12.9941 30.2459 11.9954 31.375 11C32.0015 10.4431 32.628 9.88625 33.2734 9.3125C35 8 35 8 37 8C37.33 6.35 37.66 4.7 38 3Z" fill="#EAEAEA"/>
          <path d="M20 10C17.03 10.66 14.06 11.32 11 12C11.33 16.95 11.66 21.9 12 27C11.01 26.67 10.02 26.34 9 26C9 20.72 9 15.44 9 10C16 9 16 9 20 10Z" fill="#D9D9D9"/>
          <path d="M20 17C20.99 17.33 21.98 17.66 23 18C18.71 22.29 14.42 26.58 10 31C9.34 30.34 8.68 29.68 8 29C8.61875 28.7525 9.2375 28.505 9.875 28.25C12.0973 27.2022 12.0973 27.2022 12.875 25.25C14.587 21.826 17.2416 19.6385 20 17Z" fill="#1E1B4B"/>
          <path d="M38 3C39.65 3.33 41.3 3.66 43 4C42.67 5.65 42.34 7.3 42 9C40.35 8.67 38.7 8.34 37 8C37.33 6.35 37.66 4.7 38 3Z" fill="#E2E2E2"/>
          <path d="M33 15C33.33 15.66 33.66 16.32 34 17C35.32 16.34 36.64 15.68 38 15C38.125 17.875 38.125 17.875 38 21C37.34 21.66 36.68 22.32 36 23C36 22.34 36 21.68 36 21C35.01 21 34.02 21 33 21C31.875 17.25 31.875 17.25 33 15Z" fill="#1E1B4B"/>
          <path d="M8 17C8.33 17 8.66 17 9 17C9.33 20.63 9.66 24.26 10 28C8.515 28.99 8.515 28.99 7 30C6.97291 28.3959 6.95357 26.7917 6.9375 25.1875C6.9259 24.2942 6.9143 23.4009 6.90234 22.4805C7 20 7 20 8 17Z" fill="#FAFAFA"/>
          <path d="M30.0625 6.9375C31.5166 6.96844 31.5166 6.96844 33 7C31.7194 8.7075 30.3823 10.3737 29 12C28.34 12 27.68 12 27 12C26.4375 10.0625 26.4375 10.0625 26 8C27 7 27 7 30.0625 6.9375Z" fill="#D7D7D7"/>
          <path d="M29 22C31.8844 23.293 33.8722 24.6594 36 27C33 28 33 28 30.8125 27.0625C30.2144 26.7119 29.6162 26.3613 29 26C29 24.68 29 23.36 29 22Z" fill="#1E1B4B"/>
          <path d="M13.0001 24C13.6601 24 14.3201 24 15.0001 24C13 27 11.5 28.5 9.00009 31C7.49998 29.5 7 30 9.00009 28.5C9.99009 28.17 10.4801 26.84 11.5001 26.5C11.8301 25.51 12.6601 25.02 13.0001 24Z" fill="#1E1B4B"/>
          </svg>
            Filter by Type
          </button>
          {dropdownVisible.filterType && (
            <div className="absolute right-0 mt-2 w-36 bg-white border rounded-md shadow-lg">
              {uniqueTypes.map((type) => (
                <button key={type} className={`block px-4 py-2 ${selectedFilters.type === type ? 'bg-gray-300' : 'text-gray-800 hover:bg-gray-200'}`} onClick={() => handleFilterBy("type", type)}>
                  {type}
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Undo Filter Button */}
        <button onClick={undoFilter} className="bg-red-800 text-white px-4 py-2 rounded-md hover:bg-red-700 inline-flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
        <path d="M7 19V17H14.1C15.15 17 16.0627 16.6667 16.838 16C17.6133 15.3333 18.0007 14.5 18 13.5C17.9993 12.5 17.612 11.6667 16.838 11C16.064 10.3333 15.1513 10 14.1 10H7.8L10.4 12.6L9 14L4 9L9 4L10.4 5.4L7.8 8H14.1C15.7167 8 17.1043 8.525 18.263 9.575C19.4217 10.625 20.0007 11.9333 20 13.5C19.9993 15.0667 19.4203 16.375 18.263 17.425C17.1057 18.475 15.718 19 14.1 19H7Z" fill="white"/>
        </svg>
          Undo Filter
        </button>
      </div>

      {/* Weapon Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8">
        {weapons.map((weapon) => (
          <div key={weapon.id} className="bg-indigo-100 shadow-lg rounded-lg overflow-hidden">
            <div className="flex justify-end space-x-2 p-2">
              <button onClick={() => deleteWeapon(weapon)} className="bg-red-900 text-white px-2 py-1 rounded hover:bg-red-700">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="20" viewBox="0 0 16 20" fill="none">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M4.586 0.586C4.96099 0.210901 5.46961 0.000113275 6 0H10C10.5304 0 11.0391 0.210714 11.4142 0.585786C11.7893 0.960859 12 1.46957 12 2V4H15C15.2652 4 15.5196 4.10536 15.7071 4.29289C15.8946 4.48043 16 4.73478 16 5C16 5.26522 15.8946 5.51957 15.7071 5.70711C15.5196 5.89464 15.2652 6 15 6V18C15 18.5304 14.7893 19.0391 14.4142 19.4142C14.0391 19.7893 13.5304 20 13 20H3C2.46957 20 1.96086 19.7893 1.58579 19.4142C1.21071 19.0391 1 18.5304 1 18V6C0.734784 6 0.48043 5.89464 0.292893 5.70711C0.105357 5.51957 0 5.26522 0 5C0 4.73478 0.105357 4.48043 0.292893 4.29289C0.48043 4.10536 0.734784 4 1 4H4V2C4.00011 1.46961 4.2109 0.960985 4.586 0.586ZM6 4H10V2H6V4ZM7 8C7 7.73478 6.89464 7.48043 6.70711 7.29289C6.51957 7.10536 6.26522 7 6 7C5.73478 7 5.48043 7.10536 5.29289 7.29289C5.10536 7.48043 5 7.73478 5 8V16C5 16.2652 5.10536 16.5196 5.29289 16.7071C5.48043 16.8946 5.73478 17 6 17C6.26522 17 6.51957 16.8946 6.70711 16.7071C6.89464 16.5196 7 16.2652 7 16V8ZM11 8C11 7.73478 10.8946 7.48043 10.7071 7.29289C10.5196 7.10536 10.2652 7 10 7C9.73478 7 9.48043 7.10536 9.29289 7.29289C9.10536 7.48043 9 7.73478 9 8V16C9 16.2652 9.10536 16.5196 9.29289 16.7071C9.48043 16.8946 9.73478 17 10 17C10.2652 17 10.5196 16.8946 10.7071 16.7071C10.8946 16.5196 11 16.2652 11 16V8Z" fill="white"/>
              </svg>
              </button>
              <button onClick={() => startEditMode(weapon)} className="bg-amber-500 text-white px-2 py-1 rounded hover:bg-yellow-600">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
              <path d="M16.475 5.40801L18.592 7.52501M17.836 3.54301L12.109 9.27001C11.8122 9.56485 11.6102 9.94162 11.529 10.352L11 13L13.648 12.47C14.058 12.388 14.434 12.187 14.73 11.891L20.457 6.16401C20.6291 5.99191 20.7656 5.7876 20.8588 5.56275C20.9519 5.33789 20.9998 5.09689 20.9998 4.85351C20.9998 4.61013 20.9519 4.36913 20.8588 4.14427C20.7656 3.91942 20.6291 3.71511 20.457 3.54301C20.2849 3.37091 20.0806 3.2344 19.8557 3.14126C19.6309 3.04812 19.3899 3.00018 19.1465 3.00018C18.9031 3.00018 18.6621 3.04812 18.4373 3.14126C18.2124 3.2344 18.0081 3.37091 17.836 3.54301Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M19 15V18C19 18.5304 18.7893 19.0391 18.4142 19.4142C18.0391 19.7893 17.5304 20 17 20H6C5.46957 20 4.96086 19.7893 4.58579 19.4142C4.21071 19.0391 4 18.5304 4 18V7C4 6.46957 4.21071 5.96086 4.58579 5.58579C4.96086 5.21071 5.46957 5 6 5H9" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              </button>
            </div>
            <img src={weapon.image} alt={weapon.name} className="w-full h-48 object-cover" />
            <div className="p-4 flex flex-col items-center">
              <h2 className="text-indigo-950 text-xl font-semibold">{weapon.name}</h2>
              <p className="text-gray-600">Type: {weapon.type}</p>
              <button onClick={() => viewWeaponInfo(weapon)} className="bg-indigo-900 text-white px-4 py-2 rounded-md mt-4 hover:bg-indigo-700">
                View Info
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* Popup for Add/Edit/View */}
      {showPopup && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
          <div className="bg-indigo-50 p-6 rounded-lg shadow-lg relative w-full max-w-md">
            <button onClick={closePopup} className="absolute top-2 right-2 bg-red-900 text-white px-4 py-2 rounded-md hover:bg-red-700">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M13.5909 12L18.0441 7.54687C18.2554 7.3359 18.3743 7.04962 18.3745 6.75099C18.3748 6.45237 18.2564 6.16587 18.0455 5.95453C17.8345 5.74319 17.5482 5.62431 17.2496 5.62404C16.951 5.62378 16.6645 5.74215 16.4531 5.95312L12 10.4062L7.54687 5.95312C7.33553 5.74178 7.04888 5.62305 6.75 5.62305C6.45111 5.62305 6.16447 5.74178 5.95312 5.95312C5.74178 6.16447 5.62305 6.45111 5.62305 6.75C5.62305 7.04888 5.74178 7.33553 5.95312 7.54687L10.4062 12L5.95312 16.4531C5.74178 16.6645 5.62305 16.9511 5.62305 17.25C5.62305 17.5489 5.74178 17.8355 5.95312 18.0469C6.16447 18.2582 6.45111 18.3769 6.75 18.3769C7.04888 18.3769 7.33553 18.2582 7.54687 18.0469L12 13.5937L16.4531 18.0469C16.6645 18.2582 16.9511 18.3769 17.25 18.3769C17.5489 18.3769 17.8355 18.2582 18.0469 18.0469C18.2582 17.8355 18.3769 17.5489 18.3769 17.25C18.3769 16.9511 18.2582 16.6645 18.0469 16.4531L13.5909 12Z" fill="#F8F8F8"/>
            </svg>
            </button>
            {popupType === 'view' && selectedWeapon && (
              <>
                <img src={selectedWeapon.image} alt={selectedWeapon.name} className="w-32 h-32 object-cover mx-auto" />
                <h2 className="text-indigo-950 text-2xl font-bold text-center">{selectedWeapon.name}</h2>
                <p className="text-balance text-gray-700 text-center mt-2">{selectedWeapon["passiveAbility"] || 'None'}</p>
                <div className="mt-4 space-y-2 text-center">
                  <p className="text-indigo-950"><strong>Type:</strong> {selectedWeapon.type}</p>
                  <p className="text-indigo-950"><strong>Rarity:</strong> {selectedWeapon.rarity}</p>
                  <p className="text-indigo-950"><strong>Base Attack:</strong> {convertBaseAttackToNumber(selectedWeapon.baseattack)}</p>
                  <p className="text-indigo-950"><strong>Substat:</strong> {selectedWeapon.substat || 'None'}</p>
                </div>
              </>
            )}

            {(popupType === 'add' || popupType === 'edit') && (
              <form onSubmit={handleSubmit(handleWeaponFormSubmit)}>
                <h2 className="text-black text-2xl font-bold mb-4">{popupType === 'add' ? 'Add New Weapon' : 'Edit Weapon'}</h2>
                <div className="space-y-4">
                  <input name="name" defaultValue={selectedWeapon?.name || ''} placeholder="Name" {...register("name")} className="w-full p-2 border rounded-md text-gray-900" required />
                  <input name="type" defaultValue={selectedWeapon?.type || ''} placeholder="Type" {...register("type")} className="w-full p-2 border rounded-md text-gray-900" required />
                  <input name="rarity" type="number" defaultValue={selectedWeapon?.rarity || ''} placeholder="Rarity" {...register("rarity")} className="w-full p-2 border rounded-md text-gray-900" required />
                  <input name="baseattack" defaultValue={selectedWeapon?.baseattack || ''} placeholder="Base Attack" {...register("baseattack")} className="w-full p-2 border rounded-md text-gray-900" required />
                  <input name="substat" defaultValue={selectedWeapon?.substat || ''} placeholder="Substat" {...register("substat")} className="w-full p-2 border rounded-md text-gray-900" />
                  <textarea name="passiveAbility" defaultValue={selectedWeapon?.["passiveAbility"] || ''} placeholder="passiveAbility" {...register("passiveAbility")} className="w-full p-2 border rounded-md text-gray-900" />
                  <input name="image" defaultValue={selectedWeapon?.image || ''} placeholder="Image URL" {...register("image")} className="w-full p-2 border rounded-md text-gray-900" required />
                </div>
                <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded-md mt-4 hover:bg-blue-700">
                  {popupType === 'add' ? 'Add Weapon' : 'Save Changes'}
                </button>
              </form>
            )}
          </div>
        </div>
      )}
    </div>
  );
}