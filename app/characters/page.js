"use client";
import { useState, useEffect, useRef } from "react";
import { useForm } from "react-hook-form";
import Link from 'next/link'; // Use Link for navigation
import Image from 'next/image';


export default function CharacterPage() {
  const API_BASE = "/api";
  const { register, handleSubmit, reset } = useForm();
  const dropdownRef = useRef(null); // To handle click outside of dropdowns

  const [characters, setCharacters] = useState([]);
  const [originalCharacters, setOriginalCharacters] = useState([]); // To keep original character list for reset
  const [editMode, setEditMode] = useState(false);
  const [selectedCharacter, setSelectedCharacter] = useState(null);
  const [showPopup, setShowPopup] = useState(false);
  const [popupType, setPopupType] = useState(''); // 'add' or 'edit' or 'view'

  const [uniqueElements, setUniqueElements] = useState([]);
  const [uniqueWeapons, setUniqueWeapons] = useState([]);
  const [uniqueRegions, setUniqueRegions] = useState([]);

  const [selectedSort, setSelectedSort] = useState(""); // Track selected sort option
  const [selectedFilters, setSelectedFilters] = useState({
    element: null,
    weapon: null,
    region: null,
  }); // Track selected filters

  // Dropdown visibility state
  const [dropdownVisible, setDropdownVisible] = useState({
    sort: false,
    filterElement: false,
    filterWeapon: false,
    filterRegion: false,
  });

  useEffect(() => {
    fetchCharacters();
  }, []);

  useEffect(() => {
    // Close dropdowns when clicking outside of them
    function handleClickOutside(event) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setDropdownVisible({
          sort: false,
          filterElement: false,
          filterWeapon: false,
          filterRegion: false,
        });
      }
    }

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  async function fetchCharacters() {
    try {
      const data = await fetch(`${API_BASE}/characters`);
      const characters = await data.json();
      setCharacters(characters);
      setOriginalCharacters(characters); // Save the original list for reset

      // Generate unique filter options
      setUniqueElements([...new Set(characters.map(c => c.element))]);
      setUniqueWeapons([...new Set(characters.map(c => c.weapon))]);
      setUniqueRegions([...new Set(characters.map(c => c.region))]);
    } catch (error) {
      console.error("Error fetching characters:", error);
    }
  }

  // Handle sorting by name (string) or rarity (integer)
  function handleSortBy(attribute) {
    setSelectedSort(attribute); // Set the selected sort option

    const sortedCharacters = [...characters].sort((a, b) => {
      if (attribute === "name") {
        return a[attribute].localeCompare(b[attribute]);
      } else if (attribute === "rarity") {
        return a[attribute] - b[attribute];
      }
    });
    setCharacters(sortedCharacters);
  }

  // Undo sort
  function undoSort() {
    setSelectedSort(""); // Reset selected sort
    applyFilters(); // Reapply current filters
  }

  // Handle filtering by criteria (element, weapon, region)
  function handleFilterBy(criteria, value) {
    const newFilters = { ...selectedFilters };

    // Toggle filter: if the same filter is clicked again, reset it
    if (selectedFilters[criteria] === value) {
      newFilters[criteria] = null;
    } else {
      newFilters[criteria] = value;
    }

    setSelectedFilters(newFilters);
    applyFilters(newFilters); // Apply updated filters
  }

  // Apply all selected filters to the character list
  function applyFilters(filters = selectedFilters) {
    let filteredCharacters = [...originalCharacters];

    // Apply element filter
    if (filters.element) {
      filteredCharacters = filteredCharacters.filter(character => character.element === filters.element);
    }

    // Apply weapon filter
    if (filters.weapon) {
      filteredCharacters = filteredCharacters.filter(character => character.weapon === filters.weapon);
    }

    // Apply region filter
    if (filters.region) {
      filteredCharacters = filteredCharacters.filter(character => character.region === filters.region);
    }

    setCharacters(filteredCharacters);
  }

  // Undo all filters (reset everything)
  function undoFilter() {
    setSelectedFilters({ element: null, weapon: null, region: null }); // Reset all selected filters
    setCharacters(originalCharacters); // Reset character list to original state
  }

  // Start edit mode with selected character data
  function startEditMode(character) {
    reset(character);
    setSelectedCharacter(character);
    setPopupType('edit');
    setShowPopup(true);
  }

  // Stop edit mode and reset form
  function stopEditMode() {
    reset({
      name: "",
      element: "",
      weapon: "",
      region: "",
      rarity: "",
      description: "",
      image: "",
    });
    setEditMode(false);
    setSelectedCharacter(null);
    setShowPopup(false);
  }

  // Submit the form for adding or editing a character
  function handleCharacterFormSubmit(data) {
    const method = popupType === 'edit' ? "PUT" : "POST";
    const url = popupType === 'edit' ? `${API_BASE}/characters/${selectedCharacter.id}` : `${API_BASE}/characters`;

    fetch(url, {
      method,
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    }).then(() => {
      fetchCharacters();
      stopEditMode();
    });
  }

  // Delete a character
async function deleteCharacter(character) {
  if (!confirm(`Are you sure you want to delete [${character.name}]`)) return;

  try {
    const id = character.id;
    const res = await fetch(`${API_BASE}/characters/${id}`, {
      method: "DELETE",
    });

    if (res.ok) {
      fetchCharacters(); // Refresh the characters list after deletion
    } else {
      const errorData = await res.json();
      console.error('Delete failed:', errorData.message || 'Unknown error');
    }
  } catch (error) {
    console.error('Error deleting character:', error);
  }
}

  // View character info
  function viewCharacterInfo(character) {
    setSelectedCharacter(character);
    setPopupType('view');
    setShowPopup(true);
  }

  // Close pop-up
  function closePopup() {
    setShowPopup(false);
    setSelectedCharacter(null);
  }

  // Toggle dropdown visibility
  const toggleDropdown = (type) => {
    setDropdownVisible({
      ...dropdownVisible,
      [type]: !dropdownVisible[type],
    });
  };

  return (
    <div className="container mx-auto py-8" ref={dropdownRef}>
      {/* Back Button and Title */}
      <div className="flex justify-between items-center mb-8">
        <Link href="/">
        <button type="button" className="text-white text-xl bg-indigo-950 hover:bg-indigo-950 focus:ring-4 focus:outline-none focus:ring-blue-300 font-bold rounded-lg text-sm px-5 py-3 text-center inline-flex items-center gap-2 me-2">
        <svg className="w-5 h-5 flip-horizontal" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
        <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
        </svg>
        Back
        <span className="sr-only">Icon description</span>
        </button>
        </Link>
        <div className="flex items-center gap-3">
        <svg xmlns="http://www.w3.org/2000/svg" width="57" height="64" viewBox="0 0 57 64" fill="none">
        <path d="M39.1875 3.72263C45.4959 8.16839 47.5971 13.3599 49.9219 20.5312C51.5309 24.2158 53.4387 25.3002 57 27C55.25 30.875 55.25 30.875 53 32C51.1297 36.6644 51.1297 36.6644 51.875 41.4375C52.2463 41.9531 52.6175 42.4687 53 43C52.34 43.66 51.68 44.32 51 45C47.875 44.625 47.875 44.625 45 44C44.651 47.7173 44.651 47.7173 46.5 50.8125C46.995 51.2044 47.49 51.5962 48 52C47.34 53.32 46.68 54.64 46 56C40.25 55.125 40.25 55.125 38 54C38 54.66 38 55.32 38 56C35.2751 57.1777 32.5459 58.3423 29.8125 59.5C29.0436 59.8338 28.2747 60.1677 27.4824 60.5117C23.5381 62.1707 20.3704 63.4904 16 63C15.34 61.68 14.68 60.36 14 59C14.8044 58.2369 15.6088 57.4737 16.4375 56.6875C19.168 54.2057 19.168 54.2057 20 51C19.1131 51.2681 18.2263 51.5362 17.3125 51.8125C14 52 14 52 11.375 49.9375C7.04701 44.5844 5 41.8912 5 35C4.35669 33.5422 3.66387 32.1057 2.9375 30.6875C0.653019 25.791 0.359003 22.1648 2 17C5.0461 10.5055 8.39753 4.95953 15.1836 2.07029C23.4899 -0.858309 31.4304 -0.672024 39.1875 3.72263Z" fill="#FBFBFB"/>
        <path d="M39.1875 3.72263C45.4959 8.16839 47.5971 13.3599 49.9219 20.5312C51.5309 24.2158 53.4387 25.3002 57 27C55.25 30.875 55.25 30.875 53 32C51.1297 36.6644 51.1297 36.6644 51.875 41.4375C52.2463 41.9531 52.6175 42.4687 53 43C52.34 43.66 51.68 44.32 51 45C47.875 44.625 47.875 44.625 45 44C44.651 47.7173 44.651 47.7173 46.5 50.8125C46.995 51.2044 47.49 51.5962 48 52C47.34 53.32 46.68 54.64 46 56C40.25 55.125 40.25 55.125 38 54C38 54.66 38 55.32 38 56C35.2751 57.1777 32.5459 58.3423 29.8125 59.5C29.0436 59.8338 28.2747 60.1677 27.4824 60.5117C23.5381 62.1707 20.3704 63.4904 16 63C15.34 61.68 14.68 60.36 14 59C14.8044 58.2369 15.6088 57.4737 16.4375 56.6875C19.168 54.2057 19.168 54.2057 20 51C19.1131 51.2681 18.2263 51.5362 17.3125 51.8125C14 52 14 52 11.375 49.9375C7.04701 44.5844 5 41.8912 5 35C4.35669 33.5422 3.66387 32.1057 2.9375 30.6875C0.653019 25.791 0.359003 22.1648 2 17C5.0461 10.5055 8.39753 4.95953 15.1836 2.07029C23.4899 -0.858309 31.4304 -0.672024 39.1875 3.72263ZM9.5625 9.24998C5.29067 15.0509 3.5288 19.7428 4.48047 26.8867C5.03436 29.1397 5.88703 30.971 7 33C7.99 33 8.98 33 10 33C9.64938 33.7219 9.29875 34.4437 8.9375 35.1875C7.8842 38.3474 8.06403 39.8517 9 43C9.33 43.66 9.66 44.32 10 45C10.66 45 11.32 45 12 45C12.66 46.32 13.32 47.64 14 49C16.64 48.67 19.28 48.34 22 48C22.3692 53.4154 22.3692 53.4154 20.5 56.375C20.005 56.9112 19.51 57.4475 19 58C19.33 58.66 19.66 59.32 20 60C20.9694 59.5669 21.9388 59.1337 22.9375 58.6875C27.203 56.8519 31.5798 55.4132 36 54C35.34 53.67 34.68 53.34 34 53C33.375 49.9375 33.375 49.9375 33 47C35.5171 48.4683 37.8721 49.8947 40.125 51.75C41.0531 52.3687 41.0531 52.3687 42 53C42.99 52.67 43.98 52.34 45 52C43.7934 50.6078 43.7934 50.6078 42.5625 49.1875C40.6729 47.0072 39.9422 45.8266 39 43C39.99 43.33 40.98 43.66 42 44C42.3374 40.875 42.3374 40.875 40 38.8125C39.34 38.2144 38.68 37.6162 38 37C41.6096 40.2911 44.1264 41.5466 49 42C48.6906 41.4019 48.3813 40.8037 48.0625 40.1875C47 38 47 38 46 35C46.99 35 47.98 35 49 35C49.1856 33.7934 49.1856 33.7934 49.375 32.5625C49.5813 31.7169 49.7875 30.8712 50 30C50.66 29.67 51.32 29.34 52 29C52 28.34 52 27.68 52 27C51.3761 26.4083 50.7522 25.8166 50.1094 25.207C47.7194 22.7064 47.1647 20.987 46.25 17.6875C44.2184 11.7281 41.3207 8.33417 36 4.99998C27.3267 1.56056 16.1785 1.90804 9.5625 9.24998Z" fill="#1E1B4B"/>
        <path d="M10 25C10.66 25 11.32 25 12 25C12 25.66 12 26.32 12 27C14.31 27.66 16.62 28.32 19 29C19.33 28.34 19.66 27.68 20 27C22.6002 30.9003 22.1509 34.4743 22 39C22.99 38.67 23.98 38.34 25 38C25 39.32 25 40.64 25 42C27.914 41.5885 27.914 41.5885 31 40C32.7 37.4757 33.8832 34.8248 35 32C37.475 32.495 37.475 32.495 40 33C39.01 33.33 38.02 33.66 37 34C38.6881 38.2308 38.6881 38.2308 42 41C41.505 42.485 41.505 42.485 41 44C40.34 43.67 39.68 43.34 39 43C39.9281 44.6397 39.9281 44.6397 40.875 46.3125C41.223 46.9274 41.5711 47.5423 41.9297 48.1758C42.8943 49.8198 43.9427 51.414 45 53C41.1064 52.4232 38.9881 50.4518 36 48C35.01 47.67 34.02 47.34 33 47C33.3423 49.9707 33.3423 49.9707 34 53C34.66 53.33 35.32 53.66 36 54C30.72 55.98 25.44 57.96 20 60C20 57 20 57 22 54C22.167 50.8748 22.167 50.8748 22 48C18.04 48.495 18.04 48.495 14 49C13.34 47.68 12.68 46.36 12 45C11.34 45 10.68 45 10 45C7.2355 41.0972 8.26881 37.419 9 33C9.19377 31.5008 9.38155 30.0008 9.5625 28.5C9.70688 27.345 9.85125 26.19 10 25Z" fill="#898989"/>
        <path d="M11 28C14.0831 29.199 17.0628 30.477 20 32C20.125 38.75 20.125 38.75 19 41C19.99 41.66 20.98 42.32 22 43C21.67 43.66 21.34 44.32 21 45C21.99 45.33 22.98 45.66 24 46C23.34 46.99 22.68 47.98 22 49C20.0546 49.293 20.0546 49.293 17.875 49.1875C16.5962 49.1256 15.3175 49.0637 14 49C13.34 47.68 12.68 46.36 12 45C11.34 45 10.68 45 9.99996 45C7.89241 41.5288 7.89241 41.5288 8.37496 39.1562C8.68433 38.0889 8.68433 38.0889 8.99996 37C9.35885 35.4177 9.71296 33.8344 10.0625 32.25C10.2391 31.4508 10.4157 30.6516 10.5976 29.8281C10.7304 29.2248 10.8632 28.6216 11 28Z" fill="#F9F9F9"/>
        <path d="M31 43C31.2113 48.3874 30.954 52.2232 27.8125 56.6875C25.1149 58.6409 22.2022 59.2145 19 60C19.2681 59.4844 19.5362 58.9688 19.8125 58.4375C22.11 53.7215 24.2093 49.2184 25 44C28 43 28 43 31 43Z" fill="#F6F6F6"/>
        <path d="M35 36C38.3354 37.1118 39.6371 38.4741 42 41C41.67 41.99 41.34 42.98 41 44C40.34 43.67 39.68 43.34 39 43C39.6187 44.0931 40.2375 45.1862 40.875 46.3125C41.223 46.9274 41.5711 47.5423 41.9297 48.1758C42.8943 49.8198 43.9427 51.414 45 53C41.4653 52.5921 38.9289 50.9045 36.2656 48.5977C33.8952 45.6054 34.0604 42.7467 34 39C34.33 38.01 34.66 37.02 35 36Z" fill="#ECECEC"/>
        <path d="M39 29C40.32 29.66 41.64 30.32 43 31C42.67 31.99 42.34 32.98 42 34C42.5981 34.2475 43.1963 34.495 43.8125 34.75C46.3163 36.1807 47.4807 37.5692 49 40C49 40.66 49 41.32 49 42C43.3819 41.5987 40.8363 39.9277 37 36C37 34.68 37 33.36 37 32C37.66 31.67 38.32 31.34 39 31C39 30.34 39 29.68 39 29Z" fill="#C1C1C1"/>
        <path d="M10 25C10.66 25 11.32 25 12 25C12 25.66 12 26.32 12 27C14.31 27.66 16.62 28.32 19 29C19.33 28.34 19.66 27.68 20 27C22.3285 30.6382 22.2355 33.7603 22 38C21.67 38.66 21.34 39.32 21 40C20.34 39.67 19.68 39.34 19 39C19.33 36.69 19.66 34.38 20 32C18.6078 31.5669 18.6078 31.5669 17.1875 31.125C14 30 14 30 11 28C11 30.31 11 32.62 11 35C10.34 34.34 9.68 33.68 9 33C9.03288 30.2713 9.56398 27.7033 10 25Z" fill="#BFBFBF"/>
        <path d="M24 38C24.33 39.32 24.66 40.64 25 42C26.65 41.67 28.3 41.34 30 41C30.33 41.66 30.66 42.32 31 43C29.02 43.33 27.04 43.66 25 44C24.67 46.64 24.34 49.28 24 52C23.34 51.01 22.68 50.02 22 49C22.33 48.01 22.66 47.02 23 46C22.34 45.67 21.68 45.34 21 45C21 44.34 21 43.68 21 43C20.01 42.34 19.02 41.68 18 41C19.98 40.01 21.96 39.02 24 38Z" fill="#A6A6A6"/>
        <path d="M35 36C38.3354 37.1118 39.6371 38.4741 42 41C41.67 41.99 41.34 42.98 41 44C39.0625 43.6875 39.0625 43.6875 37 43C36.67 42.01 36.34 41.02 36 40C35.34 39.67 34.68 39.34 34 39C34.33 38.01 34.66 37.02 35 36Z" fill="#DEDEDE"/>
        <path d="M39 36C43.1667 36.4735 45.9288 37.047 49 40C49 40.66 49 41.32 49 42C44.9683 41.7251 43.4311 41.4651 40.625 38.4375C39.8206 37.2309 39.8206 37.2309 39 36Z" fill="#E6E6E6"/>
        <path d="M31 49C31.66 49 32.32 49 33 49C33.1238 49.6394 33.2475 50.2788 33.375 50.9375C33.6844 51.9584 33.6844 51.9584 34 53C34.66 53.33 35.32 53.66 36 54C33.6456 55.4294 32.5197 56.0866 29.75 55.625C29.1725 55.4188 28.595 55.2125 28 55C28.99 53.02 29.98 51.04 31 49Z" fill="#BDBDBD"/>
        <path d="M27 56C27.66 56.33 28.32 56.66 29 57C26.75 59.5625 26.75 59.5625 24 62C21.6875 61.8125 21.6875 61.8125 20 61C20 60.34 20 59.68 20 59C22.3037 57.9335 24.6402 56.9358 27 56Z" fill="#1E1B4B"/>
        <path d="M37 36C39.468 37.1517 41.0478 38.0478 43 40C43.125 42.625 43.125 42.625 43 45C41.68 45.33 40.36 45.66 39 46C39 45.01 39 44.02 39 43C39.66 43 40.32 43 41 43C41.33 42.34 41.66 41.68 42 41C41.3606 40.7319 40.7212 40.4638 40.0625 40.1875C38 39 38 39 37 36Z" fill="#1E1B4B"/>
</svg>
        <h1 className="text-3xl font-bold">Characters</h1>
      </div>
      </div>

      {/* Dropdowns for Sorting and Filtering */}
      <div className="flex flex-wrap justify-end items-center mb-4 gap-4">

        {/* Add New Button */}
      <div className="flex justify-end">
      <button onClick={() => { setPopupType('add'); setShowPopup(true); }} className="bg-emerald-600 text-white px-4 py-2 rounded-md hover:bg-green-700 inline-flex items-center gap-2">
      <svg
      className="w-5 h-5"
      aria-hidden="true"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      >
      <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="2"
      d="M12 4v16m8-8H4"
      />
      </svg>
        Add Character
      </button>
      </div>
        {/* Sort By Dropdown */}
        <div className="relative inline-block text-left">
          <button onClick={() => toggleDropdown("sort")} className={`px-2 py-2 rounded-md ${selectedSort ? 'bg-blue-950 text-white' : 'bg-blue-800 text-white'} hover:bg-blue-700 inline-flex items-center gap-2`}>
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M8 2L7.293 1.293L8 0.585999L8.707 1.293L8 2ZM9 17C9 17.2652 8.89464 17.5196 8.70711 17.7071C8.51957 17.8946 8.26522 18 8 18C7.73478 18 7.48043 17.8946 7.29289 17.7071C7.10536 17.5196 7 17.2652 7 17H9ZM2.293 6.293L7.293 1.293L8.707 2.707L3.707 7.707L2.293 6.293ZM8.707 1.293L13.707 6.293L12.293 7.707L7.293 2.707L8.707 1.293ZM9 2V17H7V2H9ZM16 22L15.293 22.707L16 23.414L16.707 22.707L16 22ZM17 7C17 6.73478 16.8946 6.48043 16.7071 6.29289C16.5196 6.10536 16.2652 6 16 6C15.7348 6 15.4804 6.10536 15.2929 6.29289C15.1054 6.48043 15 6.73478 15 7H17ZM10.293 17.707L15.293 22.707L16.707 21.293L11.707 16.293L10.293 17.707ZM16.707 22.707L21.707 17.707L20.293 16.293L15.293 21.293L16.707 22.707ZM17 22V7H15V22H17Z" fill="white"/>
          </svg>
            Sort By
          </button>
          {dropdownVisible.sort && (
            <div className="absolute right-0 mt-2 w-36 bg-white border rounded-md shadow-lg">
              <button className={`block px-4 py-2 ${selectedSort === "name" ? 'bg-gray-300' : 'text-gray-800 hover:bg-gray-200'}`} onClick={() => handleSortBy("name")}>
                Name
              </button>
              <button className={`block px-4 py-2 ${selectedSort === "rarity" ? 'bg-gray-300' : 'text-gray-800 hover:bg-gray-200'}`} onClick={() => handleSortBy("rarity")}>
                Rarity
              </button>
              <button className="block px-4 py-2 text-gray-800 hover:bg-gray-200" onClick={undoSort}>
                Undo Sort
              </button>
            </div>
          )}
        </div>

        {/* Filter By Element Dropdown */}
        <div className="relative inline-block text-left">
          <button onClick={() => toggleDropdown("filterElement")} className={`px-2 py-2 rounded-md ${selectedFilters.element ? 'bg-blue-950 text-white' : 'bg-blue-800 text-white'} hover:bg-blue-700 inline-flex items-center gap-1`}>
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M11.944 1.31824C12.1075 1.49224 12.589 2.15224 12.982 2.74474C13.6525 3.75274 
          13.891 4.53124 13.702 5.09524C13.5805 5.45674 13.354 5.73274 12.8005 
          6.19474C12.6355 6.33424 12.4525 6.49774 12.3955 6.55774C11.9875 
          6.99724 11.6185 7.59274 11.491 8.02174C11.41 8.29474 11.3935 
          8.41324 11.3935 8.69224C11.395 8.91874 11.3995 8.96374 11.434 
          9.09724C11.485 9.29074 11.6365 9.59374 11.77 9.77224C11.9035 
          9.95074 12.1975 10.2447 12.3745 10.3752C12.5436 10.5 12.6625 
          10.5627 12.6625 10.5627C12.6625 10.5627 12.6046 10.4974 12.5605 
          10.4547C12.3955 10.2927 12.1615 9.96574 12.067 9.76174C11.803 
          9.18724 11.848 8.53024 12.1975 7.87474C12.46 7.38124 12.913 
          6.85474 13.4425 6.42724C13.4976 6.38302 13.6537 6.27392 13.8165 
          6.16345C14.0347 6.01533 14.2968 5.85766 14.2968 5.85766C14.2968 
          5.85766 14.3035 5.84974 14.2105 6.20074C14.065 6.75424 14.0425 
          6.84274 13.9945 7.04974C13.87 7.59124 13.8355 7.87774 13.849 
          8.28574C13.8625 8.67874 13.9165 8.98924 14.0425 9.37324C14.3245 
          10.2402 14.8855 11.0712 15.781 11.9472C15.9529 12.1147 16.0615 
          12.2052 16.0615 12.2052C16.0615 12.2052 16.0485 12.1117 16.0345 
          12.0312C16.0015 11.8407 15.895 11.5812 15.7675 11.3862C15.7375 
          11.3397 15.604 11.1567 15.4705 10.9782C15.337 10.7997 15.196 10.5942 
          15.1555 10.5222C15.0145 10.2612 14.9035 9.93724 14.8465 9.61474C14.8039 
          9.40681 14.8101 9.00909 14.854 8.81374C14.938 8.39824 15.1765 7.89274 
          15.5815 7.27624C15.6338 7.19674 15.7023 7.10821 15.7628 7.03866C15.8255 
          6.96648 15.9039 6.90447 15.9039 6.90447C15.9039 6.90447 15.916 6.91774 15.9505 7.12624C16.0135 
          7.51024 16.3045 8.31274 16.552 8.78524C16.9645 9.56974 17.4835 10.1547 18.517 10.9992C18.9295 11.3367 19.057 11.4537 19.24 11.6577C19.768 12.2457 20.275 13.0167 20.545 13.6422C20.686 13.9677 20.8105 14.3847 20.86 14.7012C20.9064 14.9567 20.9036 15.3957 
          20.86 15.6087C20.788 15.9942 20.6245 16.3782 20.362 16.7697C19.96 17.3712 19.5415 17.7837 18.7345 18.3702C18.112 18.8217 17.6635 19.1022 16.8445 19.5522C15.373 20.3592 15.0805 20.5332 14.497 20.9442C13.9555 21.3267 12.9385 22.1397 12.5995 22.4622C12.5295 
          22.5288 12.4696 22.5848 12.4186 22.6311C12.2698 22.7665 12.188 22.8245 12.188 22.8245C12.188 22.8245 12.0504 22.7127 11.8927 22.5845C11.8484 22.5485 11.801 22.5098 11.752 22.4697C11.335 22.1262 10.7905 21.7077 10.132 21.2247C9.9265 21.0732 9.7105 20.9142 9.652 20.8722C9.1375 
          20.4927 8.764 20.2587 7.999 19.8357C7.447 19.5297 7.0495 19.3032 6.3895 18.9147C4.717 17.9307 3.9535 17.3742 3.6115 16.8897C3.1825 16.2822 3.022 15.6057 3.148 14.9337C3.229 14.5047 3.4045 13.9242 3.577 13.5147C3.685 13.2567 3.9085 12.8097 4.0465 12.5757C4.429 11.9202 4.7425 11.4882 5.737 10.2447C6.58 9.19174 6.844 8.83624 7.159 
          8.33074C7.3765 7.98274 7.639 7.48924 7.7635 7.19524C7.7875 7.13974 7.82349 7.08161 7.82349 7.08161C7.82349 7.08161 7.8295 7.18474 7.8355 7.29274C7.861 7.77574 7.951 8.15374 8.1355 8.54224C8.4355 9.17224 8.9695 9.72874 9.7495 10.2177C10.2595 10.5372 10.789 10.7892 11.77 11.1822C11.971 11.2617 12.1507 
          11.3443 12.1507 11.3443C12.1507 11.3443 12.0175 11.3547 11.8945 11.3547C11.1505 11.3547 10.315 11.5527 9.652 11.8842C8.341 12.5397 7.519 13.6527 7.279 15.0972C7.258 15.2247 7.252 15.3417 7.252 15.6147C7.2535 15.9402 7.2565 15.9822 7.294 16.1577C7.3735 16.5327 
          7.5115 16.8867 7.705 17.2122C7.8475 17.4552 7.9345 17.5722 8.188 17.8692C8.305 18.0087 8.41052 18.138 8.41052 18.138C8.41052 18.138 8.22145 18.0864 8.0515 17.9982C7.9075 17.9262 7.705 17.8032 7.5175 17.6742C7.438 17.6202 7.3075 
          17.5317 7.2295 17.4777C5.6905 16.4247 5.014 15.1182 5.296 13.7472C5.4295 13.1037 5.743 12.4677 6.2275 11.8602C6.3415 11.7177 6.43935 11.5888 6.43935 11.5888C6.43935 11.5888 6.35692 11.614 6.29344 11.6464C6.23038 11.6786 6.1553 11.7224 6.094 11.7642C5.863 11.9217 5.3785 12.3207 5.197 12.5022C4.6645 13.0332 4.339 13.6227 4.2205 14.2722C4.1815 14.4837 4.1815 15.0177 4.2205 
          15.2322C4.297 15.6537 4.423 16.0122 4.6015 16.3122C4.69 16.4622 4.8925 16.7232 5.041 16.8807C5.4535 17.3172 5.9875 17.6862 6.8845 18.1572C7.045 18.2412 7.3225 18.3867 7.4995 18.4797C7.6765 18.5727 7.933 18.7107 8.0695 18.7872C8.206 18.8622 8.722 19.1397 9.217 19.4022C10.3045 19.9797 10.5205 20.1102 11.422 20.7447C11.6759 20.9236 11.8365 21.0361 11.938 21.1051C12.0638 21.1906 
          12.0937 21.2162 12.0937 21.2162C12.0937 21.2162 12.1755 21.1642 12.2728 21.1005C12.3866 21.0261 12.5492 20.9189 12.727 20.8017C13.057 20.5827 13.5595 20.2512 13.8445 20.0622C14.6635 19.5207 14.8615 19.4037 16.0645 18.7572C17.62 17.9202 18.487 17.4057 18.907 17.0682C19.1755 16.8537 19.468 16.5402 19.627 16.2972C19.771 16.0767 19.933 
          15.7167 20.017 15.4272C20.0755 15.2217 20.0995 15.0447 20.0995 14.7957C20.0995 14.5452 20.0785 14.3967 20.0125 14.1672C19.87 13.6812 19.606 13.2612 19.162 12.8157C18.9205 12.5727 18.7735 12.4452 18.5335 12.2742C18.468 12.2278 18.3814 12.1704 18.298 12.1174C18.158 12.0284 18.0085 11.944 18.0085 11.944C18.0085 11.944 18.0499 12.0486 18.0993 
          12.1714C18.1184 12.2188 18.14 12.2716 18.163 12.3267C18.4345 12.9837 18.58 13.4952 18.6535 14.0622C18.6985 14.3917 18.6985 14.8944 18.655 15.1122C18.592 15.5142 18.49 15.8367 18.307 16.2087C17.839 17.1582 16.9975 17.9367 15.796 18.5307C14.908 18.9702 14.077 19.2117 13.1545 19.2987C12.6677 19.3326 12.1755 19.3374 11.8345 19.2837C11.3455 19.2132 10.7125 19.0332 10.2445 18.8322C10.0705 18.7572 
          9.691 18.5607 9.5545 18.4722C9.1 18.1812 8.7745 17.8392 8.5855 17.4522C8.308 16.8822 8.35 16.2492 8.7025 15.7392C8.965 15.3582 9.397 15.0927 9.8695 15.0207C10.0675 14.9907 10.1845 14.9937 10.57 15.0372C10.7287 15.0557 10.8455 15.0661 10.9275 15.0835C11.0122 15.1014 11.0847 15.1436 11.0847 15.1436C11.0847 15.1436 11.041 15.1722 11.0065 15.1887C10.939 15.2187 10.6375 15.4617 10.5055 15.5922C10.3405 15.7557 10.1635 16.0377 10.0705 16.2852C9.781 17.0547 10.0105 17.9157 10.6195 18.3432C10.9855 18.5997 11.515 18.7722 12.1105 18.8262C12.3415 18.8487 12.916 18.8337 13.117 18.8022C13.342 18.7677 13.6945 18.6822 13.9675 18.5982C14.755 18.3552 15.364 18.0117 15.817 17.5572C16.1215 17.2527 16.354 16.8897 16.5055 16.4817C16.798 15.6957 16.7155 14.6952 16.288 13.8012C16.177 13.5687 16.072 13.4112 15.895 13.2117C15.8185 13.1262 15.7045 12.9957 15.6415 12.9222C15.241 12.4512 14.7625 12.0972 14.0395 11.7357C13.6765 11.5557 13.423 11.4462 12.5935 11.1087C11.3725 10.6122 10.951 10.4082 10.4395 10.0647C9.6265 9.52024 9.121 8.81374 8.9365 7.96474C8.9065 7.82674 8.89573 7.70576 8.89609 7.48016C8.89645 7.25994 8.908 7.12624 8.9365 7.00024C9.064 6.42424 9.3325 5.93224 9.958 5.12224C10.687 4.17874 10.9705 3.76174 11.2255 3.25474C11.5285 2.65474 11.722 1.97374 11.767 1.35424C11.773 1.28224 11.7873 1.17551 11.7873 1.17551C11.7873 1.17551 11.833 1.20124 11.944 1.31824ZM11.619 12.4812C11.478 12.5022 11.11 12.6012 10.9495 12.6537C10.888 12.6747 10.7665 12.7287 10.6795 12.7737C10.2445 13.0002 9.8905 13.3512 9.5995 13.8447C9.53818 13.9491 9.46714 14.0808 9.41578 14.1831C9.37039 14.2735 9.3369 14.363 9.3369 14.363C9.3369 14.363 9.421 14.3202 9.502 14.2812C9.781 14.1462 10.09 14.0457 10.4245 13.9842C10.534 13.9647 10.6495 13.9587 10.927 13.9572C11.2375 13.9572 11.311 13.9617 11.4625 13.9917C12.0145 14.0967 12.4555 14.3292 12.826 14.7102C13.1395 15.0327 13.321 15.3897 13.3975 15.8322C13.4395 16.0767 13.429 16.4067 13.375 16.6212C13.303 16.8987 13.189 17.1177 13.021 17.3007C12.9612 17.3657 12.9272 17.4156 12.9272 17.4156C12.9272 17.4156 13.0101 17.4247 13.1695 17.3627C13.2567 17.3314 13.3603 17.2871 13.4665 17.2347C15.064 16.4487 15.5305 15.5622 15.019 14.2872C14.6995 13.4907 14.1145 12.9387 13.3 12.6672C13.0165 12.5727 12.787 12.5247 12.4045 12.4797C12.232 12.4587 11.766 12.4572 11.619 12.4812Z" fill="white"/>
          </svg>
            Filter by Element
          </button>
          {dropdownVisible.filterElement && (
            <div className="absolute right-0 mt-2 w-36 bg-white border rounded-md shadow-lg">
              {uniqueElements.map((element) => (
                <button key={element} className={`block px-4 py-2 ${selectedFilters.element === element ? 'bg-gray-300' : 'text-gray-800 hover:bg-gray-200'}`} onClick={() => handleFilterBy("element", element)}>
                  {element}
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Filter By Weapon Dropdown */}
        <div className="relative inline-block text-left">
          <button onClick={() => toggleDropdown("filterWeapon")} className={`px-2 py-2 rounded-md ${selectedFilters.weapon ? 'bg-blue-950 text-white' : 'bg-blue-800 text-white'} hover:bg-blue-700 inline-flex items-center gap-2`}>
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 46 47" fill="none">
          <path d="M36 1C42.1523 0.902344 42.1523 0.902344 44 1C45 2 45 2 45.0977 3.84766C45.0651 5.89844 45.0326 7.94922 45 10C44.3555 10.2127 43.7109 10.4254 43.0469 10.6445C40.7267 11.8453 40.7267 11.8453 40.3906 14.5742C40.3442 15.6016 40.2978 16.629 40.25 17.6875C40.1611 19.3059 40.1611 19.3059 40.0703 20.957C40.017 23.2625 40.0506 25.5701 40.125 27.875C39.9353 32.6178 38.5016 35.4824 35.1602 38.8594C27.4656 45.7945 27.4656 45.7945 22 46.25C19 46 19 46 17 44.9375C14.0762 43.567 12.1388 44.3486 9 45C7.37673 45.2019 5.75154 45.3889 4.125 45.5625C3.34383 45.6463 2.56266 45.7301 1.75781 45.8164C1.17773 45.877 0.597656 45.9376 0 46C0.115097 44.5825 0.242537 43.166 0.375 41.75C0.444609 40.9611 0.514219 40.1722 0.585938 39.3594C1 37 1 37 2.0022 35.2439C3.29919 32.3272 3.30656 29.9255 3.37891 26.7383C3.41307 25.5375 3.44723 24.3368 3.48242 23.0996C3.50885 21.8499 3.53527 20.6001 3.5625 19.3125C3.62214 16.8293 3.68572 14.3462 3.75391 11.8633C3.77783 10.7628 3.80176 9.66237 3.82642 8.52856C4 6 4 6 5 5C7.05729 4.68077 9.11614 4.48839 11.1875 4.28125C13.0168 4.18002 13.0168 4.18002 14 3C16.6167 2.87286 19.1953 2.81479 21.8125 2.8125C22.5376 2.80025 23.2627 2.78801 24.0098 2.77539C27.8299 2.76491 30.7644 2.8514 34 5C34.66 3.68 35.32 2.36 36 1Z" fill="#1E1B4B"/>
          <path d="M38 3C40.475 3.495 40.475 3.495 43 4C42.67 5.65 42.34 7.3 42 9C40.68 9 39.36 9 38 9C37.7319 9.5775 37.4638 10.155 37.1875 10.75C36 13 36 13 34.375 15C32.6223 17.1449 32.6223 17.1449 33 21C33.99 21 34.98 21 36 21C35.67 22.32 35.34 23.64 35 25C33.02 24.34 31.04 23.68 29 23C28.5269 23.494 28.0538 23.9881 27.5664 24.4971C25.3885 26.7588 23.1945 29.0044 21 31.25C19.8843 32.416 19.8843 32.416 18.7461 33.6055C14.1358 38.2959 10.1096 41.5079 4 44C3.34 44 2.68 44 2 44C4.46016 35.3894 9.49191 30.2293 15.75 24.125C16.4474 23.4366 17.1448 22.7483 17.8633 22.0391C19.571 20.3547 21.2833 18.6752 23 17C22.34 15.02 21.68 13.04 21 11C22.32 10.67 23.64 10.34 25 10C25.99 11.485 25.99 11.485 27 13C30.4334 11.7937 32.5036 10.6152 35 8C35.66 8 36.32 8 37 8C37.33 6.35 37.66 4.7 38 3Z" fill="#F8F8F8"/>
          <path d="M33 7C31.7194 8.7075 30.3823 10.3737 29 12C28.34 12 27.68 12 27 12C26.67 11.01 26.34 10.02 26 9C24.35 9 22.7 9 21 9C20.2993 12.1534 20 14.7272 20 18C18.6445 19.7461 18.6445 19.7461 16.8125 21.4375C15.8612 22.3347 15.8612 22.3347 14.8906 23.25C14.2667 23.8275 13.6428 24.405 13 25C12.016 25.9743 11.0361 26.9528 10.0625 27.9375C9.04156 28.9584 9.04156 28.9584 8 30C6 28 6 28 5.77295 25.937C5.78342 25.1096 5.7939 24.2822 5.80469 23.4297C5.81113 22.5338 5.81758 21.6379 5.82422 20.7148C5.84098 19.7777 5.85773 18.8405 5.875 17.875C5.88402 16.9301 5.89305 15.9852 5.90234 15.0117C5.92595 12.6742 5.95888 10.3372 6 8C13.7652 4.1174 24.7249 6.21476 33 7Z" fill="#E7E7E7"/>
          <path d="M32.625 26.3125C33.7387 26.5394 34.8525 26.7662 36 27C36.66 26.67 37.32 26.34 38 26C37.3698 31.3569 35.1444 35.1066 31.0977 38.6797C24.8929 43.5094 24.8929 43.5094 21 44C18.25 42.5625 18.25 42.5625 16 41C16.549 37.2637 17.9284 35.8544 20.8125 33.5C23.1664 31.5635 25.1151 29.8605 27.0625 27.5C29 26 29 26 32.625 26.3125Z" fill="#E3E3E3"/>
          <path d="M38 3C40.475 3.495 40.475 3.495 43 4C42.67 5.65 42.34 7.3 42 9C40.68 9 39.36 9 38 9C37.7319 9.5775 37.4638 10.155 37.1875 10.75C36 13 36 13 34.375 15C32.6223 17.1449 32.6223 17.1449 33 21C33.99 21 34.98 21 36 21C35.67 22.32 35.34 23.64 35 25C32.9954 24.3473 30.9962 23.678 29 23C28.0925 22.7731 27.185 22.5463 26.25 22.3125C24 21 24 21 22.6875 17.625C22 14 22 14 22 10C22.99 10 23.98 10 25 10C25.99 11.485 25.99 11.485 27 13C30.4334 11.7937 32.5036 10.6152 35 8C35.66 8 36.32 8 37 8C37.33 6.35 37.66 4.7 38 3Z" fill="#EFEFEF"/>
          <path d="M19 10C19.66 12.31 20.32 14.62 21 17C19.5239 18.503 18.044 20.0023 16.5625 21.5C15.7388 22.3353 14.9151 23.1706 14.0664 24.0312C12 26 12 26 11 26C11 21.38 11 16.76 11 12C17 10 17 10 19 10Z" fill="#F9F9F9"/>
          <path d="M23.625 7.875C24.4087 7.91625 25.1925 7.9575 26 8C26.33 9.32 26.66 10.64 27 12C28.98 10.68 30.96 9.36 33 8C33 8.99 33 9.98 33 11C31 12.6875 31 12.6875 29 14C27.68 13.34 26.36 12.68 25 12C25 11.34 25 10.68 25 10C24.01 10.33 23.02 10.66 22 11C22.66 12.98 23.32 14.96 24 17C19.38 21.62 14.76 26.24 10 31C9.34 30.34 8.68 29.68 8 29C8.61875 28.7525 9.2375 28.505 9.875 28.25C12.0973 27.2022 12.0973 27.2022 12.875 25.25C14.0719 22.8561 15.1864 21.9126 17.1875 20.1875C18.8375 18.7207 18.8375 18.7207 20 17C19.8539 13.3057 19.8539 13.3057 19 10C21 8 21 8 23.625 7.875Z" fill="#1E1B4B"/>
          <path d="M32 26C32.3873 29.3889 32.1747 30.738 30.25 33.625C26.396 37.6931 26.396 37.6931 24 39C21.25 38.6875 21.25 38.6875 19 38C20.4658 34.628 22.3518 32.3501 24.9375 29.75C25.6271 29.0436 26.3168 28.3372 27.0273 27.6094C29 26 29 26 32 26Z" fill="#FCFCFC"/>
          <path d="M38 3C39.65 3.33 41.3 3.66 43 4C42.67 5.65 42.34 7.3 42 9C40.68 9 39.36 9 38 9C37.7731 9.55687 37.5463 10.1137 37.3125 10.6875C35.641 13.6325 33.4472 15.6816 31 18C30.01 16.68 29.02 15.36 28 14C29.1197 12.9941 30.2459 11.9954 31.375 11C32.0015 10.4431 32.628 9.88625 33.2734 9.3125C35 8 35 8 37 8C37.33 6.35 37.66 4.7 38 3Z" fill="#EAEAEA"/>
          <path d="M20 10C17.03 10.66 14.06 11.32 11 12C11.33 16.95 11.66 21.9 12 27C11.01 26.67 10.02 26.34 9 26C9 20.72 9 15.44 9 10C16 9 16 9 20 10Z" fill="#D9D9D9"/>
          <path d="M20 17C20.99 17.33 21.98 17.66 23 18C18.71 22.29 14.42 26.58 10 31C9.34 30.34 8.68 29.68 8 29C8.61875 28.7525 9.2375 28.505 9.875 28.25C12.0973 27.2022 12.0973 27.2022 12.875 25.25C14.587 21.826 17.2416 19.6385 20 17Z" fill="#1E1B4B"/>
          <path d="M38 3C39.65 3.33 41.3 3.66 43 4C42.67 5.65 42.34 7.3 42 9C40.35 8.67 38.7 8.34 37 8C37.33 6.35 37.66 4.7 38 3Z" fill="#E2E2E2"/>
          <path d="M33 15C33.33 15.66 33.66 16.32 34 17C35.32 16.34 36.64 15.68 38 15C38.125 17.875 38.125 17.875 38 21C37.34 21.66 36.68 22.32 36 23C36 22.34 36 21.68 36 21C35.01 21 34.02 21 33 21C31.875 17.25 31.875 17.25 33 15Z" fill="#1E1B4B"/>
          <path d="M8 17C8.33 17 8.66 17 9 17C9.33 20.63 9.66 24.26 10 28C8.515 28.99 8.515 28.99 7 30C6.97291 28.3959 6.95357 26.7917 6.9375 25.1875C6.9259 24.2942 6.9143 23.4009 6.90234 22.4805C7 20 7 20 8 17Z" fill="#FAFAFA"/>
          <path d="M30.0625 6.9375C31.5166 6.96844 31.5166 6.96844 33 7C31.7194 8.7075 30.3823 10.3737 29 12C28.34 12 27.68 12 27 12C26.4375 10.0625 26.4375 10.0625 26 8C27 7 27 7 30.0625 6.9375Z" fill="#D7D7D7"/>
          <path d="M29 22C31.8844 23.293 33.8722 24.6594 36 27C33 28 33 28 30.8125 27.0625C30.2144 26.7119 29.6162 26.3613 29 26C29 24.68 29 23.36 29 22Z" fill="#1E1B4B"/>
          <path d="M13.0001 24C13.6601 24 14.3201 24 15.0001 24C13 27 11.5 28.5 9.00009 31C7.49998 29.5 7 30 9.00009 28.5C9.99009 28.17 10.4801 26.84 11.5001 26.5C11.8301 25.51 12.6601 25.02 13.0001 24Z" fill="#1E1B4B"/>
          </svg>
            Filter by Weapon
          </button>
          {dropdownVisible.filterWeapon && (
            <div className="absolute right-0 mt-2 w-36 bg-white border rounded-md shadow-lg">
              {uniqueWeapons.map((weapon) => (
                <button key={weapon} className={`block px-4 py-2 ${selectedFilters.weapon === weapon ? 'bg-gray-300' : 'text-gray-800 hover:bg-gray-200'}`} onClick={() => handleFilterBy("weapon", weapon)}>
                  {weapon}
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Filter By Region Dropdown */}
        <div className="relative inline-block text-left">
          <button onClick={() => toggleDropdown("filterRegion")} className={`px-2 py-2 rounded-md ${selectedFilters.region ? 'bg-blue-950 text-white' : 'bg-blue-800 text-white'} hover:bg-blue-700 inline-flex items-center gap-1`}>
          <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 40 57" fill="none">
          <path d="M19 0C20.32 0.66 21.64 1.32 23 2C23 2.66 23 3.32 23 4C23.8456 4.20625 24.6912 4.4125 25.5625 4.625C30.9557 6.78227 34.6035 10.0179 37.9375 14.75C39.931 20.8478 39.8817 26.2972 37 32C37.2681 32.7631 37.5362 33.5263 37.8125 34.3125C38 37 38 37 36.8672 38.418C35.6746 39.5412 34.4701 40.652 33.2578 41.7539C30.3908 44.606 27.9987 47.7165 25.5625 50.9375C25.1135 51.5298 24.6645 52.1221 24.2019 52.7324C23.1305 54.1518 22.0646 55.5755 21 57C16.7416 55.4658 14.6344 52.2711 12.0625 48.75C11.2213 47.6189 10.3788 46.4887 9.53514 45.3594C9.1232 44.803 8.71127 44.2466 8.28685 43.6733C6.97074 41.962 5.58042 40.3398 4.16404 38.7109C3.09283 37.369 3.09283 37.369 1.99998 36C2.31248 33.875 2.31248 33.875 2.99998 32C2.69189 31.4006 2.38381 30.8012 2.06639 30.1836C-0.0462874 25.8576 0.16996 20.5398 1.65232 16.0039C4.03788 11.4069 7.68411 7.82564 12 5C13.6592 4.63129 15.3247 4.28718 17 4C18.3602 2.03242 18.3602 2.03242 19 0Z" fill="#F6F6F6"/>
          <path d="M25 11C28.1258 12.6721 30.3928 14.7856 32 18C32.6195 22.9212 32.9714 27.4925 29.8125 31.5625C27.0095 33.9917 25.6462 34.7916 22 35C22.2062 35.9281 22.4125 36.8562 22.625 37.8125C23 41 23 41 21 44C20.34 44 19.68 44 19 44C17 41 17 41 17.375 37.8125C17.6843 36.4203 17.6843 36.4203 18 35C17.2781 34.9587 16.5562 34.9175 15.8125 34.875C12.6613 33.8946 10.9557 32.5746 8.957 29.9414C7.04768 26.0682 7.13581 22.1655 7.99997 18C11.9045 10.8656 17.4279 9.93317 25 11Z" fill="#DADADA"/>
          <path d="M19 0C20.32 0.66 21.64 1.32 23 2C23 2.66 23 3.32 23 4C23.8456 4.20625 24.6912 4.4125 25.5625 4.625C30.9557 6.78227 34.6035 10.0179 37.9375 14.75C39.931 20.8478 39.8817 26.2972 37 32C37.2681 32.7631 37.5362 33.5263 37.8125 34.3125C38 37 38 37 36.8672 38.418C35.6746 39.5412 34.4701 40.652 33.2578 41.7539C30.3908 44.606 27.9987 47.7165 25.5625 50.9375C25.1135 51.5298 24.6645 52.1221 24.2019 52.7324C23.1305 54.1518 22.0646 55.5755 21 57C16.7416 55.4658 14.6344 52.2711 12.0625 48.75C11.2213 47.6189 10.3788 46.4887 9.53514 45.3594C9.1232 44.803 8.71127 44.2466 8.28685 43.6733C6.97074 41.962 5.58042 40.3398 4.16404 38.7109C3.09283 37.369 3.09283 37.369 1.99998 36C2.31248 33.875 2.31248 33.875 2.99998 32C2.69189 31.4006 2.38381 30.8012 2.06639 30.1836C-0.0462874 25.8576 0.16996 20.5398 1.65232 16.0039C4.03788 11.4069 7.68411 7.82564 12 5C13.6592 4.63129 15.3247 4.28718 17 4C18.3602 2.03242 18.3602 2.03242 19 0ZM19 2C18.4431 2.5775 17.8862 3.155 17.3125 3.75C15.3051 5.70315 13.9147 6.67066 11.5 7.9375C7.11867 10.3256 4.59049 13.2285 2.99998 18C2.26256 24.9148 3.0258 29.2871 6.99998 35C6.00998 35.66 5.01998 36.32 3.99998 37C4.49627 37.4615 4.99256 37.923 5.50389 38.3984C10.2276 42.9339 13.9946 47.5964 17.5547 53.0938C18.0316 53.7228 18.5086 54.3519 19 55C19.66 55 20.32 55 21 55C22.4807 53.1965 23.8847 51.3298 25.25 49.4375C28.6522 44.7764 32.1717 40.3191 36 36C35.01 35.67 34.02 35.34 33 35C33.66 34.0512 34.32 33.1025 35 32.125C37.6202 27.5021 37.8268 23.1949 37 18C34.7845 11.7683 30.5258 8.26293 24.75 5.375C22 4 22 4 21 2C20.34 2 19.68 2 19 2Z" fill="#1E1B4B"/>
          <path d="M25 11C28.1258 12.6721 30.3928 14.7856 32 18C32.6195 22.9212 32.9714 27.4925 29.8125 31.5625C27.0095 33.9917 25.6462 34.7916 22 35C22.2062 35.9281 22.4125 36.8562 22.625 37.8125C23 41 23 41 21 44C20.34 44 19.68 44 19 44C17 41 17 41 17.375 37.8125C17.6843 36.4203 17.6843 36.4203 18 35C17.2781 34.9587 16.5562 34.9175 15.8125 34.875C12.6613 33.8946 10.9557 32.5746 8.957 29.9414C7.04768 26.0682 7.13581 22.1655 7.99997 18C11.9045 10.8656 17.4279 9.93317 25 11ZM9.99997 17C8.38567 20.2286 8.40427 23.5099 8.99997 27C10.736 30.0251 12.8358 32.4179 16 34C21.004 34.3777 23.9988 34.112 28 31C30.7919 28.4006 31.0011 26.9914 31.5 23.125C31.3301 18.3422 29.4008 16.2427 26 13C18.7939 10.598 15.1219 11.8781 9.99997 17Z" fill="#1E1B4B"/>
          <path d="M1.99999 17C2.32999 17 2.65999 17 2.99999 17C3.02577 17.7013 3.05155 18.4025 3.07811 19.125C3.47467 25.7583 4.64383 30.2621 7.99999 36C7.00999 36.33 6.01999 36.66 4.99999 37C6.97999 39.31 8.95999 41.62 11 44C6.3871 41.6936 4.90815 40.1545 1.99999 36C2.31249 33.875 2.31249 33.875 2.99999 32C2.68803 31.4083 2.37608 30.8166 2.05468 30.207C0.794682 27.5704 0.765255 25.7194 0.812488 22.8125C0.818933 21.9321 0.825378 21.0516 0.832019 20.1445C0.999988 18 0.999988 18 1.99999 17Z" fill="#1E1B4B"/>
          <path d="M29 43C29.66 43.33 30.32 43.66 31 44C26.05 50.435 26.05 50.435 21 57C17.0597 55.0298 15.8215 53.8847 13.25 50.5C12.6364 49.7059 12.0228 48.9119 11.3906 48.0938C10 46 10 46 10 44C13.4462 45.1487 14.0917 46.0758 16.1875 48.9375C16.7173 49.6478 17.2471 50.358 17.793 51.0898C19 53 19 53 19 55C19.66 55 20.32 55 21 55C21.3983 54.1415 21.3983 54.1415 21.8047 53.2656C23.0568 50.8924 24.4936 48.8779 26.125 46.75C26.6638 46.0436 27.2027 45.3372 27.7578 44.6094C28.1677 44.0783 28.5777 43.5472 29 43Z" fill="#1E1B4B"/>
          <path d="M37 18C37.66 18 38.32 18 39 18C39.0544 19.5829 39.093 21.1664 39.125 22.75C39.1482 23.6317 39.1714 24.5134 39.1953 25.4219C38.9899 28.1334 38.2343 29.6232 37 32C37.3713 33.1756 37.3713 33.1756 37.75 34.375C38 37 38 37 36.7383 38.6523C35.2067 40.1696 33.6476 41.6103 32 43C31.34 42.67 30.68 42.34 30 42C31.65 40.35 33.3 38.7 35 37C34.01 36.34 33.02 35.68 32 35C32.6394 34.0512 33.2788 33.1025 33.9375 32.125C36.5544 27.6218 36.794 23.1192 37 18Z" fill="#1E1B4B"/>
          <path d="M17 37C17.66 37 18.32 37 19 37C19 37.99 19 38.98 19 40C19.66 40 20.32 40 21 40C21 39.34 21 38.68 21 38C21.66 38 22.32 38 23 38C22.494 40.1687 22.0002 41.9997 21 44C20.34 44 19.68 44 19 44C17 41 17 41 17 37Z" fill="#1E1B4B"/>
          <path d="M25 33C25 33.66 25 34.32 25 35C24.01 35 23.02 35 22 35C22.33 35.99 22.66 36.98 23 38C22.34 38 21.68 38 21 38C21 38.66 21 39.32 21 40C20.34 40 19.68 40 19 40C17.875 36.25 17.875 36.25 19 34C21.0886 33.3262 22.8036 33 25 33Z" fill="#1E1B4B"/>
          <path d="M29 43C29.66 43.33 30.32 43.66 31 44C30.2165 45.1722 29.423 46.3376 28.625 47.5C28.1841 48.1497 27.7433 48.7994 27.2891 49.4688C26.8637 49.9741 26.4383 50.4794 26 51C25.34 51 24.68 51 24 51C25.3715 48.0459 26.9886 45.5599 29 43Z" fill="#1E1B4B"/>
          </svg>
            Filter by Region
          </button>
          {dropdownVisible.filterRegion && (
            <div className="absolute right-0 mt-2 w-36 bg-white border rounded-md shadow-lg">
              {uniqueRegions.map((region) => (
                <button key={region} className={`block px-4 py-2 ${selectedFilters.region === region ? 'bg-gray-300' : 'text-gray-800 hover:bg-gray-200'}`} onClick={() => handleFilterBy("region", region)}>
                  {region}
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Undo Filter Button */}
        <button onClick={undoFilter} className="bg-red-800 text-white px-4 py-2 rounded-md hover:bg-red-900 inline-flex items-center gap-1">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
        <path d="M7 19V17H14.1C15.15 17 16.0627 16.6667 16.838 16C17.6133 15.3333 18.0007 14.5 18 13.5C17.9993 12.5 17.612 11.6667 16.838 11C16.064 10.3333 15.1513 10 14.1 10H7.8L10.4 12.6L9 14L4 9L9 4L10.4 5.4L7.8 8H14.1C15.7167 8 17.1043 8.525 18.263 9.575C19.4217 10.625 20.0007 11.9333 20 13.5C19.9993 15.0667 19.4203 16.375 18.263 17.425C17.1057 18.475 15.718 19 14.1 19H7Z" fill="white"/>
        </svg>
          Undo Filter
        </button>
      </div>

      {/* Character Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8">
        {characters.map((character) => (
          <div key={character.id} className="bg-indigo-100 shadow-lg rounded-lg overflow-hidden">
            <div className="flex justify-end space-x-2 p-2">
              <button onClick={() => deleteCharacter(character)} className="bg-red-900 text-white px-2 py-1 rounded hover:bg-red-700">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="20" viewBox="0 0 16 20" fill="none">
              <path fill-rule="evenodd" clip-rule="evenodd" d="M4.586 0.586C4.96099 0.210901 5.46961 0.000113275 6 0H10C10.5304 0 11.0391 0.210714 11.4142 0.585786C11.7893 0.960859 12 1.46957 12 2V4H15C15.2652 4 15.5196 4.10536 15.7071 4.29289C15.8946 4.48043 16 4.73478 16 5C16 5.26522 15.8946 5.51957 15.7071 5.70711C15.5196 5.89464 15.2652 6 15 6V18C15 18.5304 14.7893 19.0391 14.4142 19.4142C14.0391 19.7893 13.5304 20 13 20H3C2.46957 20 1.96086 19.7893 1.58579 19.4142C1.21071 19.0391 1 18.5304 1 18V6C0.734784 6 0.48043 5.89464 0.292893 5.70711C0.105357 5.51957 0 5.26522 0 5C0 4.73478 0.105357 4.48043 0.292893 4.29289C0.48043 4.10536 0.734784 4 1 4H4V2C4.00011 1.46961 4.2109 0.960985 4.586 0.586ZM6 4H10V2H6V4ZM7 8C7 7.73478 6.89464 7.48043 6.70711 7.29289C6.51957 7.10536 6.26522 7 6 7C5.73478 7 5.48043 7.10536 5.29289 7.29289C5.10536 7.48043 5 7.73478 5 8V16C5 16.2652 5.10536 16.5196 5.29289 16.7071C5.48043 16.8946 5.73478 17 6 17C6.26522 17 6.51957 16.8946 6.70711 16.7071C6.89464 16.5196 7 16.2652 7 16V8ZM11 8C11 7.73478 10.8946 7.48043 10.7071 7.29289C10.5196 7.10536 10.2652 7 10 7C9.73478 7 9.48043 7.10536 9.29289 7.29289C9.10536 7.48043 9 7.73478 9 8V16C9 16.2652 9.10536 16.5196 9.29289 16.7071C9.48043 16.8946 9.73478 17 10 17C10.2652 17 10.5196 16.8946 10.7071 16.7071C10.8946 16.5196 11 16.2652 11 16V8Z" fill="white"/>
              </svg>
              </button>
              <button onClick={() => startEditMode(character)} className="bg-amber-500 text-white px-2 py-1 rounded hover:bg-yellow-600">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
              <path d="M16.475 5.40801L18.592 7.52501M17.836 3.54301L12.109 9.27001C11.8122 9.56485 11.6102 9.94162 11.529 10.352L11 13L13.648 12.47C14.058 12.388 14.434 12.187 14.73 11.891L20.457 6.16401C20.6291 5.99191 20.7656 5.7876 20.8588 5.56275C20.9519 5.33789 20.9998 5.09689 20.9998 4.85351C20.9998 4.61013 20.9519 4.36913 20.8588 4.14427C20.7656 3.91942 20.6291 3.71511 20.457 3.54301C20.2849 3.37091 20.0806 3.2344 19.8557 3.14126C19.6309 3.04812 19.3899 3.00018 19.1465 3.00018C18.9031 3.00018 18.6621 3.04812 18.4373 3.14126C18.2124 3.2344 18.0081 3.37091 17.836 3.54301Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M19 15V18C19 18.5304 18.7893 19.0391 18.4142 19.4142C18.0391 19.7893 17.5304 20 17 20H6C5.46957 20 4.96086 19.7893 4.58579 19.4142C4.21071 19.0391 4 18.5304 4 18V7C4 6.46957 4.21071 5.96086 4.58579 5.58579C4.96086 5.21071 5.46957 5 6 5H9" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              </button>
            </div>
            <Image width={500}
            height={200} src={character.image} alt={character.name} className="w-full h-48 object-cover" />
            <div className="p-4 flex flex-col items-center">
              <h2 className="text-indigo-950 text-xl font-semibold">{character.name}</h2>
              <button onClick={() => viewCharacterInfo(character)} className="bg-indigo-900 text-white px-4 py-2 rounded-md mt-4 hover:bg-indigo-950">
                View Info
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* Popup for Add/Edit/View */}
      {showPopup && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
          <div className="bg-indigo-50 p-6 rounded-lg shadow-lg relative w-full max-w-md">
            <button onClick={closePopup} className="absolute top-2 right-2 bg-red-900 text-white px-4 py-2 rounded-md hover:bg-red-800">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M13.5909 12L18.0441 7.54687C18.2554 7.3359 18.3743 7.04962 18.3745 6.75099C18.3748 6.45237 18.2564 6.16587 18.0455 5.95453C17.8345 5.74319 17.5482 5.62431 17.2496 5.62404C16.951 5.62378 16.6645 5.74215 16.4531 5.95312L12 10.4062L7.54687 5.95312C7.33553 5.74178 7.04888 5.62305 6.75 5.62305C6.45111 5.62305 6.16447 5.74178 5.95312 5.95312C5.74178 6.16447 5.62305 6.45111 5.62305 6.75C5.62305 7.04888 5.74178 7.33553 5.95312 7.54687L10.4062 12L5.95312 16.4531C5.74178 16.6645 5.62305 16.9511 5.62305 17.25C5.62305 17.5489 5.74178 17.8355 5.95312 18.0469C6.16447 18.2582 6.45111 18.3769 6.75 18.3769C7.04888 18.3769 7.33553 18.2582 7.54687 18.0469L12 13.5937L16.4531 18.0469C16.6645 18.2582 16.9511 18.3769 17.25 18.3769C17.5489 18.3769 17.8355 18.2582 18.0469 18.0469C18.2582 17.8355 18.3769 17.5489 18.3769 17.25C18.3769 16.9511 18.2582 16.6645 18.0469 16.4531L13.5909 12Z" fill="#F8F8F8"/>
            </svg>
            </button>
            {popupType === 'view' && selectedCharacter && (
              <>
                <Image width={500}
                  height={200}src={selectedCharacter.image} alt={selectedCharacter.name} className="w-32 h-32 object-cover mx-auto" />
                <h2 className="text-indigo-950 text-2xl font-bold text-center">{selectedCharacter.name}</h2>
                <p className="text-gray-700 text-center mt-2">{selectedCharacter.description}</p>
                <div className="mt-2 space-y-2 text-center">
                  <p className="text-indigo-950 "><strong>Element:</strong> {selectedCharacter.element}</p>
                  <p className="text-indigo-950 "><strong>Weapon:</strong> {selectedCharacter.weapon}</p>
                  <p className="text-indigo-950 "><strong>Region:</strong> {selectedCharacter.region}</p>
                  <p className="text-indigo-950 "><strong>Rarity:</strong> {selectedCharacter.rarity}</p>
                </div>
              </>
            )}

            {(popupType === 'add' || popupType === 'edit') && (
              <form onSubmit={handleSubmit(handleCharacterFormSubmit)}>
                <h2 className="text-black text-2xl font-bold mb-4">{popupType === 'add' ? 'Add New Character' : 'Edit Character'}</h2>
                <div className="space-y-4">
                  <input name="name" defaultValue={selectedCharacter?.name || ''} placeholder="Name" {...register("name")} className="w-full p-2 border rounded-md text-gray-900" required />
                  <input name="element" defaultValue={selectedCharacter?.element || ''} placeholder="Element" {...register("element")} className="w-full p-2 border rounded-md text-gray-900" required />
                  <input name="weapon" defaultValue={selectedCharacter?.weapon || ''} placeholder="Weapon" {...register("weapon")} className="w-full p-2 border rounded-md text-gray-900" required />
                  <input name="region" defaultValue={selectedCharacter?.region || ''} placeholder="Region" {...register("region")} className="w-full p-2 border rounded-md text-gray-900" required />
                  <input name="rarity" type="number" defaultValue={selectedCharacter?.rarity || ''} placeholder="Rarity" {...register("rarity")} className="w-full p-2 border rounded-md text-gray-900" required />
                  <textarea name="description" defaultValue={selectedCharacter?.description || ''} placeholder="Description" {...register("description")} className="w-full p-2 border rounded-md text-gray-900" required />
                  <input name="image" defaultValue={selectedCharacter?.image || ''} placeholder="Image URL" {...register("image")} className="w-full p-2 border rounded-md text-gray-900" required />
                </div>
                <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded-md mt-4 hover:bg-blue-700">
                  {popupType === 'add' ? 'Add Character' : 'Save Changes'}
                </button>
              </form>
            )}
          </div>
        </div>
      )}
    </div>
  );
}